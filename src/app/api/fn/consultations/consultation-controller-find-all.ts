/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ConsultationResponseDto } from '../../models/consultation-response-dto';

export interface ConsultationControllerFindAll$Params {

/**
 * Filtrar por cliente
 */
  clientId?: number;

/**
 * Filtrar por estado
 */
  status?: 'pending' | 'in_progress' | 'completed' | 'cancelled';

/**
 * Filtrar por fecha específica (YYYY-MM-DD)
 */
  date?: string;

/**
 * Solo consultas de hoy
 */
  today?: boolean;

/**
 * Desde fecha (YYYY-MM-DD)
 */
  fromDate?: string;

/**
 * Hasta fecha (YYYY-MM-DD)
 */
  toDate?: string;

/**
 * Filtrar por tipo de consulta
 */
  consultationTypeId?: number;

/**
 * ID del profesional
 */
  userId?: number;

/**
 * Buscar por nombre del cliente
 */
  clientName?: string;

/**
 * Número de página
 */
  page?: number;

/**
 * Elementos por página
 */
  limit?: number;
}

export function consultationControllerFindAll(http: HttpClient, rootUrl: string, params?: ConsultationControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConsultationResponseDto>>> {
  const rb = new RequestBuilder(rootUrl, consultationControllerFindAll.PATH, 'get');
  if (params) {
    rb.query('clientId', params.clientId, {});
    rb.query('status', params.status, {});
    rb.query('date', params.date, {});
    rb.query('today', params.today, {});
    rb.query('fromDate', params.fromDate, {});
    rb.query('toDate', params.toDate, {});
    rb.query('consultationTypeId', params.consultationTypeId, {});
    rb.query('userId', params.userId, {});
    rb.query('clientName', params.clientName, {});
    rb.query('page', params.page, {});
    rb.query('limit', params.limit, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<ConsultationResponseDto>>;
    })
  );
}

consultationControllerFindAll.PATH = '/consultations';
