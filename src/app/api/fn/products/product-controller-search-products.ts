/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ProductSearchResponseDto } from '../../models/product-search-response-dto';

export interface ProductControllerSearchProducts$Params {

/**
 * Búsqueda por nombre o descripción del producto
 */
  query?: string;

/**
 * ID del usuario propietario (solo admin)
 */
  userId?: number;

/**
 * Filtrar por estado del producto
 */
  status?: 'activo' | 'inactivo' | 'descatalogado' | 'agotado' | 'suspendido';

/**
 * Precio mínimo
 */
  minPrice?: number;

/**
 * Precio máximo
 */
  maxPrice?: number;

/**
 * Número de página
 */
  page?: number;

/**
 * Elementos por página
 */
  limit?: number;

/**
 * Campo para ordenar
 */
  sortBy?: 'name' | 'currentPrice' | 'status' | 'createdAt';

/**
 * Orden de clasificación
 */
  sortOrder?: 'asc' | 'desc';
}

export function productControllerSearchProducts(http: HttpClient, rootUrl: string, params?: ProductControllerSearchProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductSearchResponseDto>> {
  const rb = new RequestBuilder(rootUrl, productControllerSearchProducts.PATH, 'get');
  if (params) {
    rb.query('query', params.query, {});
    rb.query('userId', params.userId, {});
    rb.query('status', params.status, {});
    rb.query('minPrice', params.minPrice, {});
    rb.query('maxPrice', params.maxPrice, {});
    rb.query('page', params.page, {});
    rb.query('limit', params.limit, {});
    rb.query('sortBy', params.sortBy, {});
    rb.query('sortOrder', params.sortOrder, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<ProductSearchResponseDto>;
    })
  );
}

productControllerSearchProducts.PATH = '/products/search';
