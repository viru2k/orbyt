/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ExtendedProductResponseDto } from '../../models/extended-product-response-dto';

export interface InventoryControllerSearchProducts$Params {

/**
 * Término de búsqueda
 */
  q?: string;
  stockLevel?: 'high' | 'medium' | 'low' | 'out';
  category?: string;
  limit?: number;
}

export function inventoryControllerSearchProducts(http: HttpClient, rootUrl: string, params?: InventoryControllerSearchProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ExtendedProductResponseDto>>> {
  const rb = new RequestBuilder(rootUrl, inventoryControllerSearchProducts.PATH, 'get');
  if (params) {
    rb.query('q', params.q, {});
    rb.query('stockLevel', params.stockLevel, {});
    rb.query('category', params.category, {});
    rb.query('limit', params.limit, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<ExtendedProductResponseDto>>;
    })
  );
}

inventoryControllerSearchProducts.PATH = '/inventory/products/search';
