/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Role } from '../models/role';
import { rolesControllerCreate } from '../fn/roles/roles-controller-create';
import { RolesControllerCreate$Params } from '../fn/roles/roles-controller-create';
import { rolesControllerFindAll } from '../fn/roles/roles-controller-find-all';
import { RolesControllerFindAll$Params } from '../fn/roles/roles-controller-find-all';
import { rolesControllerFindOne } from '../fn/roles/roles-controller-find-one';
import { RolesControllerFindOne$Params } from '../fn/roles/roles-controller-find-one';
import { rolesControllerRemove } from '../fn/roles/roles-controller-remove';
import { RolesControllerRemove$Params } from '../fn/roles/roles-controller-remove';
import { rolesControllerUpdate } from '../fn/roles/roles-controller-update';
import { RolesControllerUpdate$Params } from '../fn/roles/roles-controller-update';

@Injectable({ providedIn: 'root' })
export class RolesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rolesControllerFindAll()` */
  static readonly RolesControllerFindAllPath = '/roles';

  /**
   * Retrieve all roles.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rolesControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  rolesControllerFindAll$Response(params?: RolesControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Role>>> {
    return rolesControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve all roles.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rolesControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rolesControllerFindAll(params?: RolesControllerFindAll$Params, context?: HttpContext): Observable<Array<Role>> {
    return this.rolesControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Role>>): Array<Role> => r.body)
    );
  }

  /** Path part for operation `rolesControllerCreate()` */
  static readonly RolesControllerCreatePath = '/roles';

  /**
   * Create a new role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rolesControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rolesControllerCreate$Response(params: RolesControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<Role>> {
    return rolesControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rolesControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rolesControllerCreate(params: RolesControllerCreate$Params, context?: HttpContext): Observable<Role> {
    return this.rolesControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Role>): Role => r.body)
    );
  }

  /** Path part for operation `rolesControllerFindOne()` */
  static readonly RolesControllerFindOnePath = '/roles/{id}';

  /**
   * Retrieve a role by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rolesControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  rolesControllerFindOne$Response(params: RolesControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<Role>> {
    return rolesControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve a role by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rolesControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rolesControllerFindOne(params: RolesControllerFindOne$Params, context?: HttpContext): Observable<Role> {
    return this.rolesControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<Role>): Role => r.body)
    );
  }

  /** Path part for operation `rolesControllerRemove()` */
  static readonly RolesControllerRemovePath = '/roles/{id}';

  /**
   * Delete a role by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rolesControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  rolesControllerRemove$Response(params: RolesControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rolesControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a role by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rolesControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rolesControllerRemove(params: RolesControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.rolesControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rolesControllerUpdate()` */
  static readonly RolesControllerUpdatePath = '/roles/{id}';

  /**
   * Update an existing role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rolesControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rolesControllerUpdate$Response(params: RolesControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<Role>> {
    return rolesControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rolesControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rolesControllerUpdate(params: RolesControllerUpdate$Params, context?: HttpContext): Observable<Role> {
    return this.rolesControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Role>): Role => r.body)
    );
  }

}
