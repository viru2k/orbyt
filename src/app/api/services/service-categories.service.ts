/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { serviceCategoryControllerCreate } from '../fn/service-categories/service-category-controller-create';
import { ServiceCategoryControllerCreate$Params } from '../fn/service-categories/service-category-controller-create';
import { serviceCategoryControllerDelete } from '../fn/service-categories/service-category-controller-delete';
import { ServiceCategoryControllerDelete$Params } from '../fn/service-categories/service-category-controller-delete';
import { serviceCategoryControllerFindAll } from '../fn/service-categories/service-category-controller-find-all';
import { ServiceCategoryControllerFindAll$Params } from '../fn/service-categories/service-category-controller-find-all';
import { serviceCategoryControllerFindOne } from '../fn/service-categories/service-category-controller-find-one';
import { ServiceCategoryControllerFindOne$Params } from '../fn/service-categories/service-category-controller-find-one';
import { serviceCategoryControllerUpdate } from '../fn/service-categories/service-category-controller-update';
import { ServiceCategoryControllerUpdate$Params } from '../fn/service-categories/service-category-controller-update';
import { ServiceCategoryResponseDto } from '../models/service-category-response-dto';

@Injectable({ providedIn: 'root' })
export class ServiceCategoriesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `serviceCategoryControllerFindAll()` */
  static readonly ServiceCategoryControllerFindAllPath = '/categories';

  /**
   * Listar todas las categorías del perfil actual.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceCategoryControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceCategoryControllerFindAll$Response(params?: ServiceCategoryControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ServiceCategoryResponseDto>>> {
    return serviceCategoryControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todas las categorías del perfil actual.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceCategoryControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceCategoryControllerFindAll(params?: ServiceCategoryControllerFindAll$Params, context?: HttpContext): Observable<Array<ServiceCategoryResponseDto>> {
    return this.serviceCategoryControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ServiceCategoryResponseDto>>): Array<ServiceCategoryResponseDto> => r.body)
    );
  }

  /** Path part for operation `serviceCategoryControllerCreate()` */
  static readonly ServiceCategoryControllerCreatePath = '/categories';

  /**
   * Crear nueva categoría de servicio.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceCategoryControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  serviceCategoryControllerCreate$Response(params: ServiceCategoryControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceCategoryResponseDto>> {
    return serviceCategoryControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nueva categoría de servicio.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceCategoryControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  serviceCategoryControllerCreate(params: ServiceCategoryControllerCreate$Params, context?: HttpContext): Observable<ServiceCategoryResponseDto> {
    return this.serviceCategoryControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceCategoryResponseDto>): ServiceCategoryResponseDto => r.body)
    );
  }

  /** Path part for operation `serviceCategoryControllerFindOne()` */
  static readonly ServiceCategoryControllerFindOnePath = '/categories/{id}';

  /**
   * Obtener una categoría por ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceCategoryControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceCategoryControllerFindOne$Response(params: ServiceCategoryControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceCategoryResponseDto>> {
    return serviceCategoryControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener una categoría por ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceCategoryControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceCategoryControllerFindOne(params: ServiceCategoryControllerFindOne$Params, context?: HttpContext): Observable<ServiceCategoryResponseDto> {
    return this.serviceCategoryControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceCategoryResponseDto>): ServiceCategoryResponseDto => r.body)
    );
  }

  /** Path part for operation `serviceCategoryControllerUpdate()` */
  static readonly ServiceCategoryControllerUpdatePath = '/categories/{id}';

  /**
   * Actualizar una categoría.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceCategoryControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  serviceCategoryControllerUpdate$Response(params: ServiceCategoryControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceCategoryResponseDto>> {
    return serviceCategoryControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar una categoría.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceCategoryControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  serviceCategoryControllerUpdate(params: ServiceCategoryControllerUpdate$Params, context?: HttpContext): Observable<ServiceCategoryResponseDto> {
    return this.serviceCategoryControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceCategoryResponseDto>): ServiceCategoryResponseDto => r.body)
    );
  }

  /** Path part for operation `serviceCategoryControllerDelete()` */
  static readonly ServiceCategoryControllerDeletePath = '/categories/{id}';

  /**
   * Eliminar una categoría.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceCategoryControllerDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceCategoryControllerDelete$Response(params: ServiceCategoryControllerDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return serviceCategoryControllerDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar una categoría.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceCategoryControllerDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceCategoryControllerDelete(params: ServiceCategoryControllerDelete$Params, context?: HttpContext): Observable<void> {
    return this.serviceCategoryControllerDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
