/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { userControllerCreateSubUser } from '../fn/users/user-controller-create-sub-user';
import { UserControllerCreateSubUser$Params } from '../fn/users/user-controller-create-sub-user';
import { userControllerGetGroupUsers } from '../fn/users/user-controller-get-group-users';
import { UserControllerGetGroupUsers$Params } from '../fn/users/user-controller-get-group-users';
import { userControllerGetMyProfile } from '../fn/users/user-controller-get-my-profile';
import { UserControllerGetMyProfile$Params } from '../fn/users/user-controller-get-my-profile';
import { userControllerGetSubUsers } from '../fn/users/user-controller-get-sub-users';
import { UserControllerGetSubUsers$Params } from '../fn/users/user-controller-get-sub-users';
import { userControllerUpdateSubUser } from '../fn/users/user-controller-update-sub-user';
import { UserControllerUpdateSubUser$Params } from '../fn/users/user-controller-update-sub-user';
import { userControllerUploadAvatar } from '../fn/users/user-controller-upload-avatar';
import { UserControllerUploadAvatar$Params } from '../fn/users/user-controller-upload-avatar';
import { UserResponseDto } from '../models/user-response-dto';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userControllerGetMyProfile()` */
  static readonly UserControllerGetMyProfilePath = '/api/users/me';

  /**
   * Obtener el perfil del usuario autenticado.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerGetMyProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetMyProfile$Response(params?: UserControllerGetMyProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseDto>> {
    return userControllerGetMyProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener el perfil del usuario autenticado.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerGetMyProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetMyProfile(params?: UserControllerGetMyProfile$Params, context?: HttpContext): Observable<UserResponseDto> {
    return this.userControllerGetMyProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseDto>): UserResponseDto => r.body)
    );
  }

  /** Path part for operation `userControllerCreateSubUser()` */
  static readonly UserControllerCreateSubUserPath = '/api/users/sub-user';

  /**
   * Admin: Crear un nuevo sub-usuario en el grupo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerCreateSubUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userControllerCreateSubUser$Response(params: UserControllerCreateSubUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseDto>> {
    return userControllerCreateSubUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Admin: Crear un nuevo sub-usuario en el grupo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerCreateSubUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userControllerCreateSubUser(params: UserControllerCreateSubUser$Params, context?: HttpContext): Observable<UserResponseDto> {
    return this.userControllerCreateSubUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseDto>): UserResponseDto => r.body)
    );
  }

  /** Path part for operation `userControllerGetGroupUsers()` */
  static readonly UserControllerGetGroupUsersPath = '/api/users/group';

  /**
   * Admin: Listar todos los usuarios del grupo incluyendo admin.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerGetGroupUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetGroupUsers$Response(params?: UserControllerGetGroupUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponseDto>>> {
    return userControllerGetGroupUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Admin: Listar todos los usuarios del grupo incluyendo admin.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerGetGroupUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetGroupUsers(params?: UserControllerGetGroupUsers$Params, context?: HttpContext): Observable<Array<UserResponseDto>> {
    return this.userControllerGetGroupUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponseDto>>): Array<UserResponseDto> => r.body)
    );
  }

  /** Path part for operation `userControllerGetSubUsers()` */
  static readonly UserControllerGetSubUsersPath = '/api/users/sub-users';

  /**
   * Admin: Listar solo los sub-usuarios del grupo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerGetSubUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetSubUsers$Response(params?: UserControllerGetSubUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponseDto>>> {
    return userControllerGetSubUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Admin: Listar solo los sub-usuarios del grupo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerGetSubUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetSubUsers(params?: UserControllerGetSubUsers$Params, context?: HttpContext): Observable<Array<UserResponseDto>> {
    return this.userControllerGetSubUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponseDto>>): Array<UserResponseDto> => r.body)
    );
  }

  /** Path part for operation `userControllerUpdateSubUser()` */
  static readonly UserControllerUpdateSubUserPath = '/api/users/sub-user/{id}';

  /**
   * Admin: Actualizar un sub-usuario (perfil, permisos, estado).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerUpdateSubUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userControllerUpdateSubUser$Response(params: UserControllerUpdateSubUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseDto>> {
    return userControllerUpdateSubUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Admin: Actualizar un sub-usuario (perfil, permisos, estado).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerUpdateSubUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userControllerUpdateSubUser(params: UserControllerUpdateSubUser$Params, context?: HttpContext): Observable<UserResponseDto> {
    return this.userControllerUpdateSubUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseDto>): UserResponseDto => r.body)
    );
  }

  /** Path part for operation `userControllerUploadAvatar()` */
  static readonly UserControllerUploadAvatarPath = '/api/users/upload-avatar';

  /**
   * Subir avatar del usuario.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerUploadAvatar()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  userControllerUploadAvatar$Response(params: UserControllerUploadAvatar$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseDto>> {
    return userControllerUploadAvatar(this.http, this.rootUrl, params, context);
  }

  /**
   * Subir avatar del usuario.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerUploadAvatar$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  userControllerUploadAvatar(params: UserControllerUploadAvatar$Params, context?: HttpContext): Observable<UserResponseDto> {
    return this.userControllerUploadAvatar$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseDto>): UserResponseDto => r.body)
    );
  }

}
