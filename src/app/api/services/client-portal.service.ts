/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ClientAppointmentsListDto } from '../models/client-appointments-list-dto';
import { ClientCompleteHistoryDto } from '../models/client-complete-history-dto';
import { clientPortalControllerGetAppointments } from '../fn/client-portal/client-portal-controller-get-appointments';
import { ClientPortalControllerGetAppointments$Params } from '../fn/client-portal/client-portal-controller-get-appointments';
import { clientPortalControllerGetHistory } from '../fn/client-portal/client-portal-controller-get-history';
import { ClientPortalControllerGetHistory$Params } from '../fn/client-portal/client-portal-controller-get-history';
import { clientPortalControllerGetProfile } from '../fn/client-portal/client-portal-controller-get-profile';
import { ClientPortalControllerGetProfile$Params } from '../fn/client-portal/client-portal-controller-get-profile';
import { clientPortalControllerGetRewards } from '../fn/client-portal/client-portal-controller-get-rewards';
import { ClientPortalControllerGetRewards$Params } from '../fn/client-portal/client-portal-controller-get-rewards';
import { clientPortalControllerUpdatePassword } from '../fn/client-portal/client-portal-controller-update-password';
import { ClientPortalControllerUpdatePassword$Params } from '../fn/client-portal/client-portal-controller-update-password';
import { clientPortalControllerUpdateProfile } from '../fn/client-portal/client-portal-controller-update-profile';
import { ClientPortalControllerUpdateProfile$Params } from '../fn/client-portal/client-portal-controller-update-profile';
import { ClientProfileResponseDto } from '../models/client-profile-response-dto';
import { ClientRewardsSummaryDto } from '../models/client-rewards-summary-dto';

@Injectable({ providedIn: 'root' })
export class ClientPortalService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `clientPortalControllerGetProfile()` */
  static readonly ClientPortalControllerGetProfilePath = '/api/client/profile';

  /**
   * Obtener perfil del cliente.
   *
   * El cliente puede ver su perfil completo, incluyendo datos registrados por el admin (solo lectura) y sus datos personales editables
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientPortalControllerGetProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientPortalControllerGetProfile$Response(params?: ClientPortalControllerGetProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientProfileResponseDto>> {
    return clientPortalControllerGetProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener perfil del cliente.
   *
   * El cliente puede ver su perfil completo, incluyendo datos registrados por el admin (solo lectura) y sus datos personales editables
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientPortalControllerGetProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientPortalControllerGetProfile(params?: ClientPortalControllerGetProfile$Params, context?: HttpContext): Observable<ClientProfileResponseDto> {
    return this.clientPortalControllerGetProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientProfileResponseDto>): ClientProfileResponseDto => r.body)
    );
  }

  /** Path part for operation `clientPortalControllerUpdateProfile()` */
  static readonly ClientPortalControllerUpdateProfilePath = '/api/client/profile';

  /**
   * Actualizar perfil del cliente.
   *
   * El cliente puede actualizar SOLO sus campos editables: preferredName, address, gender, birthDate, personalNotes, avatarUrl. Los datos críticos (name, lastName, email, phone, membershipNumber) son de SOLO LECTURA.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientPortalControllerUpdateProfile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientPortalControllerUpdateProfile$Response(params: ClientPortalControllerUpdateProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientProfileResponseDto>> {
    return clientPortalControllerUpdateProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar perfil del cliente.
   *
   * El cliente puede actualizar SOLO sus campos editables: preferredName, address, gender, birthDate, personalNotes, avatarUrl. Los datos críticos (name, lastName, email, phone, membershipNumber) son de SOLO LECTURA.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientPortalControllerUpdateProfile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientPortalControllerUpdateProfile(params: ClientPortalControllerUpdateProfile$Params, context?: HttpContext): Observable<ClientProfileResponseDto> {
    return this.clientPortalControllerUpdateProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientProfileResponseDto>): ClientProfileResponseDto => r.body)
    );
  }

  /** Path part for operation `clientPortalControllerUpdatePassword()` */
  static readonly ClientPortalControllerUpdatePasswordPath = '/api/client/profile/password';

  /**
   * Cambiar contraseña del portal.
   *
   * Permite al cliente cambiar su contraseña de acceso al portal. Requiere la contraseña actual para confirmar la identidad.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientPortalControllerUpdatePassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientPortalControllerUpdatePassword$Response(params: ClientPortalControllerUpdatePassword$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'message'?: string;
}>> {
    return clientPortalControllerUpdatePassword(this.http, this.rootUrl, params, context);
  }

  /**
   * Cambiar contraseña del portal.
   *
   * Permite al cliente cambiar su contraseña de acceso al portal. Requiere la contraseña actual para confirmar la identidad.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientPortalControllerUpdatePassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientPortalControllerUpdatePassword(params: ClientPortalControllerUpdatePassword$Params, context?: HttpContext): Observable<{
'message'?: string;
}> {
    return this.clientPortalControllerUpdatePassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'message'?: string;
}>): {
'message'?: string;
} => r.body)
    );
  }

  /** Path part for operation `clientPortalControllerGetAppointments()` */
  static readonly ClientPortalControllerGetAppointmentsPath = '/api/client/profile/appointments';

  /**
   * Obtener citas del cliente.
   *
   * Lista todas las citas del cliente (pasadas, presentes y futuras) con información básica. SOLO LECTURA - el cliente no puede modificar las citas.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientPortalControllerGetAppointments()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientPortalControllerGetAppointments$Response(params?: ClientPortalControllerGetAppointments$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientAppointmentsListDto>> {
    return clientPortalControllerGetAppointments(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener citas del cliente.
   *
   * Lista todas las citas del cliente (pasadas, presentes y futuras) con información básica. SOLO LECTURA - el cliente no puede modificar las citas.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientPortalControllerGetAppointments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientPortalControllerGetAppointments(params?: ClientPortalControllerGetAppointments$Params, context?: HttpContext): Observable<ClientAppointmentsListDto> {
    return this.clientPortalControllerGetAppointments$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientAppointmentsListDto>): ClientAppointmentsListDto => r.body)
    );
  }

  /** Path part for operation `clientPortalControllerGetRewards()` */
  static readonly ClientPortalControllerGetRewardsPath = '/api/client/profile/rewards';

  /**
   * Obtener recompensas del cliente.
   *
   * Muestra el resumen completo de recompensas: programas en progreso, recompensas disponibles para canjear, historial y estadísticas. SOLO LECTURA - el cliente no puede canjear desde este endpoint.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientPortalControllerGetRewards()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientPortalControllerGetRewards$Response(params?: ClientPortalControllerGetRewards$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientRewardsSummaryDto>> {
    return clientPortalControllerGetRewards(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener recompensas del cliente.
   *
   * Muestra el resumen completo de recompensas: programas en progreso, recompensas disponibles para canjear, historial y estadísticas. SOLO LECTURA - el cliente no puede canjear desde este endpoint.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientPortalControllerGetRewards$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientPortalControllerGetRewards(params?: ClientPortalControllerGetRewards$Params, context?: HttpContext): Observable<ClientRewardsSummaryDto> {
    return this.clientPortalControllerGetRewards$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientRewardsSummaryDto>): ClientRewardsSummaryDto => r.body)
    );
  }

  /** Path part for operation `clientPortalControllerGetHistory()` */
  static readonly ClientPortalControllerGetHistoryPath = '/api/client/profile/history';

  /**
   * Obtener historial completo del cliente.
   *
   * Historial de servicios recibidos, facturas y estadísticas. SOLO LECTURA - información histórica para consulta del cliente.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientPortalControllerGetHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientPortalControllerGetHistory$Response(params?: ClientPortalControllerGetHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientCompleteHistoryDto>> {
    return clientPortalControllerGetHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener historial completo del cliente.
   *
   * Historial de servicios recibidos, facturas y estadísticas. SOLO LECTURA - información histórica para consulta del cliente.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientPortalControllerGetHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientPortalControllerGetHistory(params?: ClientPortalControllerGetHistory$Params, context?: HttpContext): Observable<ClientCompleteHistoryDto> {
    return this.clientPortalControllerGetHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientCompleteHistoryDto>): ClientCompleteHistoryDto => r.body)
    );
  }

}
