/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { dashboardControllerGetAppointmentsSummary } from '../fn/dashboard/dashboard-controller-get-appointments-summary';
import { DashboardControllerGetAppointmentsSummary$Params } from '../fn/dashboard/dashboard-controller-get-appointments-summary';
import { dashboardControllerGetBusinessTypePerformance } from '../fn/dashboard/dashboard-controller-get-business-type-performance';
import { DashboardControllerGetBusinessTypePerformance$Params } from '../fn/dashboard/dashboard-controller-get-business-type-performance';
import { dashboardControllerGetClientsSummary } from '../fn/dashboard/dashboard-controller-get-clients-summary';
import { DashboardControllerGetClientsSummary$Params } from '../fn/dashboard/dashboard-controller-get-clients-summary';
import { dashboardControllerGetConsultationsSummary } from '../fn/dashboard/dashboard-controller-get-consultations-summary';
import { DashboardControllerGetConsultationsSummary$Params } from '../fn/dashboard/dashboard-controller-get-consultations-summary';
import { dashboardControllerGetMetrics } from '../fn/dashboard/dashboard-controller-get-metrics';
import { DashboardControllerGetMetrics$Params } from '../fn/dashboard/dashboard-controller-get-metrics';
import { dashboardControllerGetQuickStats } from '../fn/dashboard/dashboard-controller-get-quick-stats';
import { DashboardControllerGetQuickStats$Params } from '../fn/dashboard/dashboard-controller-get-quick-stats';
import { dashboardControllerGetRecentActivity } from '../fn/dashboard/dashboard-controller-get-recent-activity';
import { DashboardControllerGetRecentActivity$Params } from '../fn/dashboard/dashboard-controller-get-recent-activity';
import { dashboardControllerGetRevenueSummary } from '../fn/dashboard/dashboard-controller-get-revenue-summary';
import { DashboardControllerGetRevenueSummary$Params } from '../fn/dashboard/dashboard-controller-get-revenue-summary';
import { DashboardMetricsDto } from '../models/dashboard-metrics-dto';

@Injectable({ providedIn: 'root' })
export class DashboardService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `dashboardControllerGetMetrics()` */
  static readonly DashboardControllerGetMetricsPath = '/dashboard/metrics';

  /**
   * Obtener métricas completas del dashboard.
   *
   * Retorna todas las métricas necesarias para el dashboard: citas, consultas, clientes, ingresos y métricas por tipo de negocio
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dashboardControllerGetMetrics()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetMetrics$Response(params?: DashboardControllerGetMetrics$Params, context?: HttpContext): Observable<StrictHttpResponse<DashboardMetricsDto>> {
    return dashboardControllerGetMetrics(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener métricas completas del dashboard.
   *
   * Retorna todas las métricas necesarias para el dashboard: citas, consultas, clientes, ingresos y métricas por tipo de negocio
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dashboardControllerGetMetrics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetMetrics(params?: DashboardControllerGetMetrics$Params, context?: HttpContext): Observable<DashboardMetricsDto> {
    return this.dashboardControllerGetMetrics$Response(params, context).pipe(
      map((r: StrictHttpResponse<DashboardMetricsDto>): DashboardMetricsDto => r.body)
    );
  }

  /** Path part for operation `dashboardControllerGetQuickStats()` */
  static readonly DashboardControllerGetQuickStatsPath = '/dashboard/quick-stats';

  /**
   * Obtener estadísticas rápidas para widgets.
   *
   * Retorna estadísticas básicas para mostrar en widgets del dashboard
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dashboardControllerGetQuickStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetQuickStats$Response(params?: DashboardControllerGetQuickStats$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return dashboardControllerGetQuickStats(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener estadísticas rápidas para widgets.
   *
   * Retorna estadísticas básicas para mostrar en widgets del dashboard
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dashboardControllerGetQuickStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetQuickStats(params?: DashboardControllerGetQuickStats$Params, context?: HttpContext): Observable<any> {
    return this.dashboardControllerGetQuickStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `dashboardControllerGetRecentActivity()` */
  static readonly DashboardControllerGetRecentActivityPath = '/dashboard/recent-activity';

  /**
   * Obtener actividad reciente.
   *
   * Retorna las consultas y citas más recientes del usuario
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dashboardControllerGetRecentActivity()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetRecentActivity$Response(params?: DashboardControllerGetRecentActivity$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return dashboardControllerGetRecentActivity(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener actividad reciente.
   *
   * Retorna las consultas y citas más recientes del usuario
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dashboardControllerGetRecentActivity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetRecentActivity(params?: DashboardControllerGetRecentActivity$Params, context?: HttpContext): Observable<any> {
    return this.dashboardControllerGetRecentActivity$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `dashboardControllerGetAppointmentsSummary()` */
  static readonly DashboardControllerGetAppointmentsSummaryPath = '/dashboard/appointments/summary';

  /**
   * Resumen de citas para dashboard.
   *
   * Retorna métricas específicas de citas organizadas para el dashboard
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dashboardControllerGetAppointmentsSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetAppointmentsSummary$Response(params?: DashboardControllerGetAppointmentsSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return dashboardControllerGetAppointmentsSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Resumen de citas para dashboard.
   *
   * Retorna métricas específicas de citas organizadas para el dashboard
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dashboardControllerGetAppointmentsSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetAppointmentsSummary(params?: DashboardControllerGetAppointmentsSummary$Params, context?: HttpContext): Observable<any> {
    return this.dashboardControllerGetAppointmentsSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `dashboardControllerGetConsultationsSummary()` */
  static readonly DashboardControllerGetConsultationsSummaryPath = '/dashboard/consultations/summary';

  /**
   * Resumen de consultas para dashboard.
   *
   * Retorna métricas específicas de consultas organizadas para el dashboard
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dashboardControllerGetConsultationsSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetConsultationsSummary$Response(params?: DashboardControllerGetConsultationsSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return dashboardControllerGetConsultationsSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Resumen de consultas para dashboard.
   *
   * Retorna métricas específicas de consultas organizadas para el dashboard
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dashboardControllerGetConsultationsSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetConsultationsSummary(params?: DashboardControllerGetConsultationsSummary$Params, context?: HttpContext): Observable<any> {
    return this.dashboardControllerGetConsultationsSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `dashboardControllerGetClientsSummary()` */
  static readonly DashboardControllerGetClientsSummaryPath = '/dashboard/clients/summary';

  /**
   * Resumen de clientes para dashboard.
   *
   * Retorna métricas específicas de clientes organizadas para el dashboard
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dashboardControllerGetClientsSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetClientsSummary$Response(params?: DashboardControllerGetClientsSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return dashboardControllerGetClientsSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Resumen de clientes para dashboard.
   *
   * Retorna métricas específicas de clientes organizadas para el dashboard
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dashboardControllerGetClientsSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetClientsSummary(params?: DashboardControllerGetClientsSummary$Params, context?: HttpContext): Observable<any> {
    return this.dashboardControllerGetClientsSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `dashboardControllerGetRevenueSummary()` */
  static readonly DashboardControllerGetRevenueSummaryPath = '/dashboard/revenue/summary';

  /**
   * Resumen de ingresos para dashboard.
   *
   * Retorna métricas específicas de ingresos organizadas para el dashboard
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dashboardControllerGetRevenueSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetRevenueSummary$Response(params?: DashboardControllerGetRevenueSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return dashboardControllerGetRevenueSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Resumen de ingresos para dashboard.
   *
   * Retorna métricas específicas de ingresos organizadas para el dashboard
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dashboardControllerGetRevenueSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetRevenueSummary(params?: DashboardControllerGetRevenueSummary$Params, context?: HttpContext): Observable<any> {
    return this.dashboardControllerGetRevenueSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `dashboardControllerGetBusinessTypePerformance()` */
  static readonly DashboardControllerGetBusinessTypePerformancePath = '/dashboard/business-types/performance';

  /**
   * Rendimiento por tipo de negocio.
   *
   * Retorna métricas de rendimiento organizadas por tipo de negocio
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dashboardControllerGetBusinessTypePerformance()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetBusinessTypePerformance$Response(params?: DashboardControllerGetBusinessTypePerformance$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return dashboardControllerGetBusinessTypePerformance(this.http, this.rootUrl, params, context);
  }

  /**
   * Rendimiento por tipo de negocio.
   *
   * Retorna métricas de rendimiento organizadas por tipo de negocio
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dashboardControllerGetBusinessTypePerformance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dashboardControllerGetBusinessTypePerformance(params?: DashboardControllerGetBusinessTypePerformance$Params, context?: HttpContext): Observable<any> {
    return this.dashboardControllerGetBusinessTypePerformance$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
