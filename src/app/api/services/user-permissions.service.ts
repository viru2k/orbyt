/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { userPermissionsControllerCheckUserPermissions } from '../fn/user-permissions/user-permissions-controller-check-user-permissions';
import { UserPermissionsControllerCheckUserPermissions$Params } from '../fn/user-permissions/user-permissions-controller-check-user-permissions';
import { userPermissionsControllerGetUserModulePermissions } from '../fn/user-permissions/user-permissions-controller-get-user-module-permissions';
import { UserPermissionsControllerGetUserModulePermissions$Params } from '../fn/user-permissions/user-permissions-controller-get-user-module-permissions';

@Injectable({ providedIn: 'root' })
export class UserPermissionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userPermissionsControllerGetUserModulePermissions()` */
  static readonly UserPermissionsControllerGetUserModulePermissionsPath = '/user/permissions/modules';

  /**
   * Obtener permisos de módulos del usuario actual.
   *
   * Retorna la lista de permisos de módulos que tiene el usuario para controlar el acceso en el frontend
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userPermissionsControllerGetUserModulePermissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  userPermissionsControllerGetUserModulePermissions$Response(params?: UserPermissionsControllerGetUserModulePermissions$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'permissions'?: Array<string>;

/**
 * Indica si el usuario es admin y tiene acceso completo
 */
'hasFullAccess'?: boolean;
}>> {
    return userPermissionsControllerGetUserModulePermissions(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener permisos de módulos del usuario actual.
   *
   * Retorna la lista de permisos de módulos que tiene el usuario para controlar el acceso en el frontend
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userPermissionsControllerGetUserModulePermissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userPermissionsControllerGetUserModulePermissions(params?: UserPermissionsControllerGetUserModulePermissions$Params, context?: HttpContext): Observable<{
'permissions'?: Array<string>;

/**
 * Indica si el usuario es admin y tiene acceso completo
 */
'hasFullAccess'?: boolean;
}> {
    return this.userPermissionsControllerGetUserModulePermissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'permissions'?: Array<string>;

/**
 * Indica si el usuario es admin y tiene acceso completo
 */
'hasFullAccess'?: boolean;
}>): {
'permissions'?: Array<string>;

/**
 * Indica si el usuario es admin y tiene acceso completo
 */
'hasFullAccess'?: boolean;
} => r.body)
    );
  }

  /** Path part for operation `userPermissionsControllerCheckUserPermissions()` */
  static readonly UserPermissionsControllerCheckUserPermissionsPath = '/user/permissions/check';

  /**
   * Verificar permisos específicos del usuario.
   *
   * Endpoint para que el frontend verifique si el usuario tiene permisos específicos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userPermissionsControllerCheckUserPermissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  userPermissionsControllerCheckUserPermissions$Response(params?: UserPermissionsControllerCheckUserPermissions$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: boolean;
}>> {
    return userPermissionsControllerCheckUserPermissions(this.http, this.rootUrl, params, context);
  }

  /**
   * Verificar permisos específicos del usuario.
   *
   * Endpoint para que el frontend verifique si el usuario tiene permisos específicos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userPermissionsControllerCheckUserPermissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userPermissionsControllerCheckUserPermissions(params?: UserPermissionsControllerCheckUserPermissions$Params, context?: HttpContext): Observable<{
[key: string]: boolean;
}> {
    return this.userPermissionsControllerCheckUserPermissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: boolean;
}>): {
[key: string]: boolean;
} => r.body)
    );
  }

}
