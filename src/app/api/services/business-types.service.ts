/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { businessTypeControllerCreateBusinessType } from '../fn/business-types/business-type-controller-create-business-type';
import { BusinessTypeControllerCreateBusinessType$Params } from '../fn/business-types/business-type-controller-create-business-type';
import { businessTypeControllerCreateConsultationType } from '../fn/business-types/business-type-controller-create-consultation-type';
import { BusinessTypeControllerCreateConsultationType$Params } from '../fn/business-types/business-type-controller-create-consultation-type';
import { businessTypeControllerDeleteBusinessType } from '../fn/business-types/business-type-controller-delete-business-type';
import { BusinessTypeControllerDeleteBusinessType$Params } from '../fn/business-types/business-type-controller-delete-business-type';
import { businessTypeControllerDeleteConsultationType } from '../fn/business-types/business-type-controller-delete-consultation-type';
import { BusinessTypeControllerDeleteConsultationType$Params } from '../fn/business-types/business-type-controller-delete-consultation-type';
import { businessTypeControllerFindAllBusinessTypes } from '../fn/business-types/business-type-controller-find-all-business-types';
import { BusinessTypeControllerFindAllBusinessTypes$Params } from '../fn/business-types/business-type-controller-find-all-business-types';
import { businessTypeControllerFindBusinessTypeByCode } from '../fn/business-types/business-type-controller-find-business-type-by-code';
import { BusinessTypeControllerFindBusinessTypeByCode$Params } from '../fn/business-types/business-type-controller-find-business-type-by-code';
import { businessTypeControllerFindBusinessTypeById } from '../fn/business-types/business-type-controller-find-business-type-by-id';
import { BusinessTypeControllerFindBusinessTypeById$Params } from '../fn/business-types/business-type-controller-find-business-type-by-id';
import { businessTypeControllerFindConsultationTypeById } from '../fn/business-types/business-type-controller-find-consultation-type-by-id';
import { BusinessTypeControllerFindConsultationTypeById$Params } from '../fn/business-types/business-type-controller-find-consultation-type-by-id';
import { businessTypeControllerFindConsultationTypesByBusinessType } from '../fn/business-types/business-type-controller-find-consultation-types-by-business-type';
import { BusinessTypeControllerFindConsultationTypesByBusinessType$Params } from '../fn/business-types/business-type-controller-find-consultation-types-by-business-type';
import { businessTypeControllerGetConsultationTemplate } from '../fn/business-types/business-type-controller-get-consultation-template';
import { BusinessTypeControllerGetConsultationTemplate$Params } from '../fn/business-types/business-type-controller-get-consultation-template';
import { businessTypeControllerUpdateBusinessType } from '../fn/business-types/business-type-controller-update-business-type';
import { BusinessTypeControllerUpdateBusinessType$Params } from '../fn/business-types/business-type-controller-update-business-type';
import { businessTypeControllerUpdateConsultationType } from '../fn/business-types/business-type-controller-update-consultation-type';
import { BusinessTypeControllerUpdateConsultationType$Params } from '../fn/business-types/business-type-controller-update-consultation-type';
import { BusinessTypeResponseDto } from '../models/business-type-response-dto';
import { ConsultationTypeResponseDto } from '../models/consultation-type-response-dto';

@Injectable({ providedIn: 'root' })
export class BusinessTypesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `businessTypeControllerFindAllBusinessTypes()` */
  static readonly BusinessTypeControllerFindAllBusinessTypesPath = '/api/business-types';

  /**
   * Listar todos los tipos de negocio.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerFindAllBusinessTypes()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindAllBusinessTypes$Response(params?: BusinessTypeControllerFindAllBusinessTypes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BusinessTypeResponseDto>>> {
    return businessTypeControllerFindAllBusinessTypes(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todos los tipos de negocio.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerFindAllBusinessTypes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindAllBusinessTypes(params?: BusinessTypeControllerFindAllBusinessTypes$Params, context?: HttpContext): Observable<Array<BusinessTypeResponseDto>> {
    return this.businessTypeControllerFindAllBusinessTypes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BusinessTypeResponseDto>>): Array<BusinessTypeResponseDto> => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerCreateBusinessType()` */
  static readonly BusinessTypeControllerCreateBusinessTypePath = '/api/business-types';

  /**
   * Crear nuevo tipo de negocio.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerCreateBusinessType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessTypeControllerCreateBusinessType$Response(params: BusinessTypeControllerCreateBusinessType$Params, context?: HttpContext): Observable<StrictHttpResponse<BusinessTypeResponseDto>> {
    return businessTypeControllerCreateBusinessType(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nuevo tipo de negocio.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerCreateBusinessType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessTypeControllerCreateBusinessType(params: BusinessTypeControllerCreateBusinessType$Params, context?: HttpContext): Observable<BusinessTypeResponseDto> {
    return this.businessTypeControllerCreateBusinessType$Response(params, context).pipe(
      map((r: StrictHttpResponse<BusinessTypeResponseDto>): BusinessTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerFindBusinessTypeById()` */
  static readonly BusinessTypeControllerFindBusinessTypeByIdPath = '/api/business-types/{id}';

  /**
   * Obtener tipo de negocio por ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerFindBusinessTypeById()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindBusinessTypeById$Response(params: BusinessTypeControllerFindBusinessTypeById$Params, context?: HttpContext): Observable<StrictHttpResponse<BusinessTypeResponseDto>> {
    return businessTypeControllerFindBusinessTypeById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener tipo de negocio por ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerFindBusinessTypeById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindBusinessTypeById(params: BusinessTypeControllerFindBusinessTypeById$Params, context?: HttpContext): Observable<BusinessTypeResponseDto> {
    return this.businessTypeControllerFindBusinessTypeById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BusinessTypeResponseDto>): BusinessTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerDeleteBusinessType()` */
  static readonly BusinessTypeControllerDeleteBusinessTypePath = '/api/business-types/{id}';

  /**
   * Desactivar tipo de negocio.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerDeleteBusinessType()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerDeleteBusinessType$Response(params: BusinessTypeControllerDeleteBusinessType$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessTypeControllerDeleteBusinessType(this.http, this.rootUrl, params, context);
  }

  /**
   * Desactivar tipo de negocio.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerDeleteBusinessType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerDeleteBusinessType(params: BusinessTypeControllerDeleteBusinessType$Params, context?: HttpContext): Observable<void> {
    return this.businessTypeControllerDeleteBusinessType$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerUpdateBusinessType()` */
  static readonly BusinessTypeControllerUpdateBusinessTypePath = '/api/business-types/{id}';

  /**
   * Actualizar tipo de negocio.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerUpdateBusinessType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessTypeControllerUpdateBusinessType$Response(params: BusinessTypeControllerUpdateBusinessType$Params, context?: HttpContext): Observable<StrictHttpResponse<BusinessTypeResponseDto>> {
    return businessTypeControllerUpdateBusinessType(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar tipo de negocio.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerUpdateBusinessType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessTypeControllerUpdateBusinessType(params: BusinessTypeControllerUpdateBusinessType$Params, context?: HttpContext): Observable<BusinessTypeResponseDto> {
    return this.businessTypeControllerUpdateBusinessType$Response(params, context).pipe(
      map((r: StrictHttpResponse<BusinessTypeResponseDto>): BusinessTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerFindBusinessTypeByCode()` */
  static readonly BusinessTypeControllerFindBusinessTypeByCodePath = '/api/business-types/code/{code}';

  /**
   * Obtener tipo de negocio por código.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerFindBusinessTypeByCode()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindBusinessTypeByCode$Response(params: BusinessTypeControllerFindBusinessTypeByCode$Params, context?: HttpContext): Observable<StrictHttpResponse<BusinessTypeResponseDto>> {
    return businessTypeControllerFindBusinessTypeByCode(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener tipo de negocio por código.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerFindBusinessTypeByCode$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindBusinessTypeByCode(params: BusinessTypeControllerFindBusinessTypeByCode$Params, context?: HttpContext): Observable<BusinessTypeResponseDto> {
    return this.businessTypeControllerFindBusinessTypeByCode$Response(params, context).pipe(
      map((r: StrictHttpResponse<BusinessTypeResponseDto>): BusinessTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerCreateConsultationType()` */
  static readonly BusinessTypeControllerCreateConsultationTypePath = '/api/business-types/consultation-types';

  /**
   * Crear nuevo tipo de consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerCreateConsultationType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessTypeControllerCreateConsultationType$Response(params: BusinessTypeControllerCreateConsultationType$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationTypeResponseDto>> {
    return businessTypeControllerCreateConsultationType(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nuevo tipo de consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerCreateConsultationType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessTypeControllerCreateConsultationType(params: BusinessTypeControllerCreateConsultationType$Params, context?: HttpContext): Observable<ConsultationTypeResponseDto> {
    return this.businessTypeControllerCreateConsultationType$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationTypeResponseDto>): ConsultationTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerFindConsultationTypesByBusinessType()` */
  static readonly BusinessTypeControllerFindConsultationTypesByBusinessTypePath = '/api/business-types/{businessTypeId}/consultation-types';

  /**
   * Obtener tipos de consulta por tipo de negocio.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerFindConsultationTypesByBusinessType()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindConsultationTypesByBusinessType$Response(params: BusinessTypeControllerFindConsultationTypesByBusinessType$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConsultationTypeResponseDto>>> {
    return businessTypeControllerFindConsultationTypesByBusinessType(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener tipos de consulta por tipo de negocio.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerFindConsultationTypesByBusinessType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindConsultationTypesByBusinessType(params: BusinessTypeControllerFindConsultationTypesByBusinessType$Params, context?: HttpContext): Observable<Array<ConsultationTypeResponseDto>> {
    return this.businessTypeControllerFindConsultationTypesByBusinessType$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ConsultationTypeResponseDto>>): Array<ConsultationTypeResponseDto> => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerFindConsultationTypeById()` */
  static readonly BusinessTypeControllerFindConsultationTypeByIdPath = '/api/business-types/consultation-types/{id}';

  /**
   * Obtener tipo de consulta por ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerFindConsultationTypeById()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindConsultationTypeById$Response(params: BusinessTypeControllerFindConsultationTypeById$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationTypeResponseDto>> {
    return businessTypeControllerFindConsultationTypeById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener tipo de consulta por ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerFindConsultationTypeById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerFindConsultationTypeById(params: BusinessTypeControllerFindConsultationTypeById$Params, context?: HttpContext): Observable<ConsultationTypeResponseDto> {
    return this.businessTypeControllerFindConsultationTypeById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationTypeResponseDto>): ConsultationTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerDeleteConsultationType()` */
  static readonly BusinessTypeControllerDeleteConsultationTypePath = '/api/business-types/consultation-types/{id}';

  /**
   * Desactivar tipo de consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerDeleteConsultationType()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerDeleteConsultationType$Response(params: BusinessTypeControllerDeleteConsultationType$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessTypeControllerDeleteConsultationType(this.http, this.rootUrl, params, context);
  }

  /**
   * Desactivar tipo de consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerDeleteConsultationType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerDeleteConsultationType(params: BusinessTypeControllerDeleteConsultationType$Params, context?: HttpContext): Observable<void> {
    return this.businessTypeControllerDeleteConsultationType$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerUpdateConsultationType()` */
  static readonly BusinessTypeControllerUpdateConsultationTypePath = '/api/business-types/consultation-types/{id}';

  /**
   * Actualizar tipo de consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerUpdateConsultationType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessTypeControllerUpdateConsultationType$Response(params: BusinessTypeControllerUpdateConsultationType$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationTypeResponseDto>> {
    return businessTypeControllerUpdateConsultationType(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar tipo de consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerUpdateConsultationType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessTypeControllerUpdateConsultationType(params: BusinessTypeControllerUpdateConsultationType$Params, context?: HttpContext): Observable<ConsultationTypeResponseDto> {
    return this.businessTypeControllerUpdateConsultationType$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationTypeResponseDto>): ConsultationTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `businessTypeControllerGetConsultationTemplate()` */
  static readonly BusinessTypeControllerGetConsultationTemplatePath = '/api/business-types/code/{code}/consultation-template';

  /**
   * Obtener template de consulta por tipo de negocio.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessTypeControllerGetConsultationTemplate()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerGetConsultationTemplate$Response(params: BusinessTypeControllerGetConsultationTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessTypeControllerGetConsultationTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener template de consulta por tipo de negocio.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessTypeControllerGetConsultationTemplate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessTypeControllerGetConsultationTemplate(params: BusinessTypeControllerGetConsultationTemplate$Params, context?: HttpContext): Observable<void> {
    return this.businessTypeControllerGetConsultationTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
