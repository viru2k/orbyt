/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { subscriptionControllerFindAll } from '../fn/subscription/subscription-controller-find-all';
import { SubscriptionControllerFindAll$Params } from '../fn/subscription/subscription-controller-find-all';
import { subscriptionControllerFindOne } from '../fn/subscription/subscription-controller-find-one';
import { SubscriptionControllerFindOne$Params } from '../fn/subscription/subscription-controller-find-one';
import { SubscriptionResponseDto } from '../models/subscription-response-dto';

@Injectable({ providedIn: 'root' })
export class SubscriptionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `subscriptionControllerFindAll()` */
  static readonly SubscriptionControllerFindAllPath = '/api/subscription';

  /**
   * Listar tipos de suscripci贸n disponibles.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscriptionControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscriptionControllerFindAll$Response(params?: SubscriptionControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SubscriptionResponseDto>>> {
    return subscriptionControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar tipos de suscripci贸n disponibles.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscriptionControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscriptionControllerFindAll(params?: SubscriptionControllerFindAll$Params, context?: HttpContext): Observable<Array<SubscriptionResponseDto>> {
    return this.subscriptionControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SubscriptionResponseDto>>): Array<SubscriptionResponseDto> => r.body)
    );
  }

  /** Path part for operation `subscriptionControllerFindOne()` */
  static readonly SubscriptionControllerFindOnePath = '/api/subscription/{id}';

  /**
   * Obtener detalles de una suscripci贸n.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscriptionControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscriptionControllerFindOne$Response(params: SubscriptionControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<SubscriptionResponseDto>> {
    return subscriptionControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener detalles de una suscripci贸n.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscriptionControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscriptionControllerFindOne(params: SubscriptionControllerFindOne$Params, context?: HttpContext): Observable<SubscriptionResponseDto> {
    return this.subscriptionControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubscriptionResponseDto>): SubscriptionResponseDto => r.body)
    );
  }

}
