/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { roomControllerCreate } from '../fn/rooms/room-controller-create';
import { RoomControllerCreate$Params } from '../fn/rooms/room-controller-create';
import { roomControllerFindAll } from '../fn/rooms/room-controller-find-all';
import { RoomControllerFindAll$Params } from '../fn/rooms/room-controller-find-all';
import { roomControllerFindOne } from '../fn/rooms/room-controller-find-one';
import { RoomControllerFindOne$Params } from '../fn/rooms/room-controller-find-one';
import { roomControllerRemove } from '../fn/rooms/room-controller-remove';
import { RoomControllerRemove$Params } from '../fn/rooms/room-controller-remove';
import { roomControllerToggleStatus } from '../fn/rooms/room-controller-toggle-status';
import { RoomControllerToggleStatus$Params } from '../fn/rooms/room-controller-toggle-status';
import { roomControllerUpdate } from '../fn/rooms/room-controller-update';
import { RoomControllerUpdate$Params } from '../fn/rooms/room-controller-update';
import { RoomListResponseDto } from '../models/room-list-response-dto';
import { RoomResponseDto } from '../models/room-response-dto';

@Injectable({ providedIn: 'root' })
export class RoomsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `roomControllerFindAll()` */
  static readonly RoomControllerFindAllPath = '/rooms';

  /**
   * Get all rooms with optional filters.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomControllerFindAll$Response(params?: RoomControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomListResponseDto>> {
    return roomControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all rooms with optional filters.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomControllerFindAll(params?: RoomControllerFindAll$Params, context?: HttpContext): Observable<RoomListResponseDto> {
    return this.roomControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomListResponseDto>): RoomListResponseDto => r.body)
    );
  }

  /** Path part for operation `roomControllerCreate()` */
  static readonly RoomControllerCreatePath = '/rooms';

  /**
   * Create a new room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  roomControllerCreate$Response(params: RoomControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomResponseDto>> {
    return roomControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  roomControllerCreate(params: RoomControllerCreate$Params, context?: HttpContext): Observable<RoomResponseDto> {
    return this.roomControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomResponseDto>): RoomResponseDto => r.body)
    );
  }

  /** Path part for operation `roomControllerFindOne()` */
  static readonly RoomControllerFindOnePath = '/rooms/{id}';

  /**
   * Get room by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomControllerFindOne$Response(params: RoomControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomResponseDto>> {
    return roomControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Get room by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomControllerFindOne(params: RoomControllerFindOne$Params, context?: HttpContext): Observable<RoomResponseDto> {
    return this.roomControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomResponseDto>): RoomResponseDto => r.body)
    );
  }

  /** Path part for operation `roomControllerRemove()` */
  static readonly RoomControllerRemovePath = '/rooms/{id}';

  /**
   * Delete room by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomControllerRemove$Response(params: RoomControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roomControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete room by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomControllerRemove(params: RoomControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.roomControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `roomControllerUpdate()` */
  static readonly RoomControllerUpdatePath = '/rooms/{id}';

  /**
   * Update room by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  roomControllerUpdate$Response(params: RoomControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomResponseDto>> {
    return roomControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Update room by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  roomControllerUpdate(params: RoomControllerUpdate$Params, context?: HttpContext): Observable<RoomResponseDto> {
    return this.roomControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomResponseDto>): RoomResponseDto => r.body)
    );
  }

  /** Path part for operation `roomControllerToggleStatus()` */
  static readonly RoomControllerToggleStatusPath = '/rooms/{id}/toggle-status';

  /**
   * Toggle room status (active/inactive).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomControllerToggleStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomControllerToggleStatus$Response(params: RoomControllerToggleStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomResponseDto>> {
    return roomControllerToggleStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Toggle room status (active/inactive).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomControllerToggleStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomControllerToggleStatus(params: RoomControllerToggleStatus$Params, context?: HttpContext): Observable<RoomResponseDto> {
    return this.roomControllerToggleStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomResponseDto>): RoomResponseDto => r.body)
    );
  }

}
