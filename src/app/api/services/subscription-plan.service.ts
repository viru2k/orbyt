/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { subscriptionPlanControllerAddFeature } from '../fn/subscription-plan/subscription-plan-controller-add-feature';
import { SubscriptionPlanControllerAddFeature$Params } from '../fn/subscription-plan/subscription-plan-controller-add-feature';
import { subscriptionPlanControllerCreate } from '../fn/subscription-plan/subscription-plan-controller-create';
import { SubscriptionPlanControllerCreate$Params } from '../fn/subscription-plan/subscription-plan-controller-create';
import { subscriptionPlanControllerFindAll } from '../fn/subscription-plan/subscription-plan-controller-find-all';
import { SubscriptionPlanControllerFindAll$Params } from '../fn/subscription-plan/subscription-plan-controller-find-all';
import { subscriptionPlanControllerFindOne } from '../fn/subscription-plan/subscription-plan-controller-find-one';
import { SubscriptionPlanControllerFindOne$Params } from '../fn/subscription-plan/subscription-plan-controller-find-one';
import { SubscriptionPlanFeatureResponseDto } from '../models/subscription-plan-feature-response-dto';
import { SubscriptionPlanResponseDto } from '../models/subscription-plan-response-dto';

@Injectable({ providedIn: 'root' })
export class SubscriptionPlanService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `subscriptionPlanControllerFindAll()` */
  static readonly SubscriptionPlanControllerFindAllPath = '/api/subscription-plan';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscriptionPlanControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscriptionPlanControllerFindAll$Response(params?: SubscriptionPlanControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SubscriptionPlanResponseDto>>> {
    return subscriptionPlanControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscriptionPlanControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscriptionPlanControllerFindAll(params?: SubscriptionPlanControllerFindAll$Params, context?: HttpContext): Observable<Array<SubscriptionPlanResponseDto>> {
    return this.subscriptionPlanControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SubscriptionPlanResponseDto>>): Array<SubscriptionPlanResponseDto> => r.body)
    );
  }

  /** Path part for operation `subscriptionPlanControllerCreate()` */
  static readonly SubscriptionPlanControllerCreatePath = '/api/subscription-plan';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscriptionPlanControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscriptionPlanControllerCreate$Response(params: SubscriptionPlanControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<SubscriptionPlanResponseDto>> {
    return subscriptionPlanControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscriptionPlanControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscriptionPlanControllerCreate(params: SubscriptionPlanControllerCreate$Params, context?: HttpContext): Observable<SubscriptionPlanResponseDto> {
    return this.subscriptionPlanControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubscriptionPlanResponseDto>): SubscriptionPlanResponseDto => r.body)
    );
  }

  /** Path part for operation `subscriptionPlanControllerFindOne()` */
  static readonly SubscriptionPlanControllerFindOnePath = '/api/subscription-plan/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscriptionPlanControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscriptionPlanControllerFindOne$Response(params: SubscriptionPlanControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<SubscriptionPlanResponseDto>> {
    return subscriptionPlanControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscriptionPlanControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscriptionPlanControllerFindOne(params: SubscriptionPlanControllerFindOne$Params, context?: HttpContext): Observable<SubscriptionPlanResponseDto> {
    return this.subscriptionPlanControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubscriptionPlanResponseDto>): SubscriptionPlanResponseDto => r.body)
    );
  }

  /** Path part for operation `subscriptionPlanControllerAddFeature()` */
  static readonly SubscriptionPlanControllerAddFeaturePath = '/api/subscription-plan/{id}/feature';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscriptionPlanControllerAddFeature()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscriptionPlanControllerAddFeature$Response(params: SubscriptionPlanControllerAddFeature$Params, context?: HttpContext): Observable<StrictHttpResponse<SubscriptionPlanFeatureResponseDto>> {
    return subscriptionPlanControllerAddFeature(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscriptionPlanControllerAddFeature$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscriptionPlanControllerAddFeature(params: SubscriptionPlanControllerAddFeature$Params, context?: HttpContext): Observable<SubscriptionPlanFeatureResponseDto> {
    return this.subscriptionPlanControllerAddFeature$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubscriptionPlanFeatureResponseDto>): SubscriptionPlanFeatureResponseDto => r.body)
    );
  }

}
