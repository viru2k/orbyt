/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { invoiceControllerCancel } from '../fn/invoices/invoice-controller-cancel';
import { InvoiceControllerCancel$Params } from '../fn/invoices/invoice-controller-cancel';
import { invoiceControllerCreate } from '../fn/invoices/invoice-controller-create';
import { InvoiceControllerCreate$Params } from '../fn/invoices/invoice-controller-create';
import { invoiceControllerFindAll } from '../fn/invoices/invoice-controller-find-all';
import { InvoiceControllerFindAll$Params } from '../fn/invoices/invoice-controller-find-all';
import { invoiceControllerFindOne } from '../fn/invoices/invoice-controller-find-one';
import { InvoiceControllerFindOne$Params } from '../fn/invoices/invoice-controller-find-one';
import { invoiceControllerGetOverdueInvoices } from '../fn/invoices/invoice-controller-get-overdue-invoices';
import { InvoiceControllerGetOverdueInvoices$Params } from '../fn/invoices/invoice-controller-get-overdue-invoices';
import { invoiceControllerGetPendingInvoices } from '../fn/invoices/invoice-controller-get-pending-invoices';
import { InvoiceControllerGetPendingInvoices$Params } from '../fn/invoices/invoice-controller-get-pending-invoices';
import { invoiceControllerGetSalesStats } from '../fn/invoices/invoice-controller-get-sales-stats';
import { InvoiceControllerGetSalesStats$Params } from '../fn/invoices/invoice-controller-get-sales-stats';
import { invoiceControllerGetTodaySales } from '../fn/invoices/invoice-controller-get-today-sales';
import { InvoiceControllerGetTodaySales$Params } from '../fn/invoices/invoice-controller-get-today-sales';
import { invoiceControllerProcessPayment } from '../fn/invoices/invoice-controller-process-payment';
import { InvoiceControllerProcessPayment$Params } from '../fn/invoices/invoice-controller-process-payment';
import { invoiceControllerRemove } from '../fn/invoices/invoice-controller-remove';
import { InvoiceControllerRemove$Params } from '../fn/invoices/invoice-controller-remove';
import { invoiceControllerUpdate } from '../fn/invoices/invoice-controller-update';
import { InvoiceControllerUpdate$Params } from '../fn/invoices/invoice-controller-update';
import { InvoiceResponseDto } from '../models/invoice-response-dto';

@Injectable({ providedIn: 'root' })
export class InvoicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `invoiceControllerFindAll()` */
  static readonly InvoiceControllerFindAllPath = '/api/invoices';

  /**
   * Listar facturas del usuario.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerFindAll$Response(params?: InvoiceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InvoiceResponseDto>>> {
    return invoiceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar facturas del usuario.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerFindAll(params?: InvoiceControllerFindAll$Params, context?: HttpContext): Observable<Array<InvoiceResponseDto>> {
    return this.invoiceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InvoiceResponseDto>>): Array<InvoiceResponseDto> => r.body)
    );
  }

  /** Path part for operation `invoiceControllerCreate()` */
  static readonly InvoiceControllerCreatePath = '/api/invoices';

  /**
   * Crear nueva factura.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerCreate$Response(params: InvoiceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceResponseDto>> {
    return invoiceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nueva factura.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerCreate(params: InvoiceControllerCreate$Params, context?: HttpContext): Observable<InvoiceResponseDto> {
    return this.invoiceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceResponseDto>): InvoiceResponseDto => r.body)
    );
  }

  /** Path part for operation `invoiceControllerGetPendingInvoices()` */
  static readonly InvoiceControllerGetPendingInvoicesPath = '/api/invoices/pending';

  /**
   * Obtener facturas pendientes.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerGetPendingInvoices()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerGetPendingInvoices$Response(params?: InvoiceControllerGetPendingInvoices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InvoiceResponseDto>>> {
    return invoiceControllerGetPendingInvoices(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener facturas pendientes.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerGetPendingInvoices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerGetPendingInvoices(params?: InvoiceControllerGetPendingInvoices$Params, context?: HttpContext): Observable<Array<InvoiceResponseDto>> {
    return this.invoiceControllerGetPendingInvoices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InvoiceResponseDto>>): Array<InvoiceResponseDto> => r.body)
    );
  }

  /** Path part for operation `invoiceControllerGetOverdueInvoices()` */
  static readonly InvoiceControllerGetOverdueInvoicesPath = '/api/invoices/overdue';

  /**
   * Obtener facturas vencidas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerGetOverdueInvoices()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerGetOverdueInvoices$Response(params?: InvoiceControllerGetOverdueInvoices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InvoiceResponseDto>>> {
    return invoiceControllerGetOverdueInvoices(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener facturas vencidas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerGetOverdueInvoices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerGetOverdueInvoices(params?: InvoiceControllerGetOverdueInvoices$Params, context?: HttpContext): Observable<Array<InvoiceResponseDto>> {
    return this.invoiceControllerGetOverdueInvoices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InvoiceResponseDto>>): Array<InvoiceResponseDto> => r.body)
    );
  }

  /** Path part for operation `invoiceControllerGetSalesStats()` */
  static readonly InvoiceControllerGetSalesStatsPath = '/api/invoices/stats/sales';

  /**
   * Obtener estadísticas de ventas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerGetSalesStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerGetSalesStats$Response(params?: InvoiceControllerGetSalesStats$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return invoiceControllerGetSalesStats(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener estadísticas de ventas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerGetSalesStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerGetSalesStats(params?: InvoiceControllerGetSalesStats$Params, context?: HttpContext): Observable<void> {
    return this.invoiceControllerGetSalesStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `invoiceControllerGetTodaySales()` */
  static readonly InvoiceControllerGetTodaySalesPath = '/api/invoices/stats/today';

  /**
   * Obtener ventas de hoy.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerGetTodaySales()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerGetTodaySales$Response(params?: InvoiceControllerGetTodaySales$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return invoiceControllerGetTodaySales(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener ventas de hoy.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerGetTodaySales$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerGetTodaySales(params?: InvoiceControllerGetTodaySales$Params, context?: HttpContext): Observable<void> {
    return this.invoiceControllerGetTodaySales$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `invoiceControllerFindOne()` */
  static readonly InvoiceControllerFindOnePath = '/api/invoices/{id}';

  /**
   * Obtener factura por ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerFindOne$Response(params: InvoiceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceResponseDto>> {
    return invoiceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener factura por ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerFindOne(params: InvoiceControllerFindOne$Params, context?: HttpContext): Observable<InvoiceResponseDto> {
    return this.invoiceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceResponseDto>): InvoiceResponseDto => r.body)
    );
  }

  /** Path part for operation `invoiceControllerRemove()` */
  static readonly InvoiceControllerRemovePath = '/api/invoices/{id}';

  /**
   * Eliminar factura.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerRemove$Response(params: InvoiceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return invoiceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar factura.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerRemove(params: InvoiceControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.invoiceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `invoiceControllerUpdate()` */
  static readonly InvoiceControllerUpdatePath = '/api/invoices/{id}';

  /**
   * Actualizar factura.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerUpdate$Response(params: InvoiceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceResponseDto>> {
    return invoiceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar factura.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerUpdate(params: InvoiceControllerUpdate$Params, context?: HttpContext): Observable<InvoiceResponseDto> {
    return this.invoiceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceResponseDto>): InvoiceResponseDto => r.body)
    );
  }

  /** Path part for operation `invoiceControllerProcessPayment()` */
  static readonly InvoiceControllerProcessPaymentPath = '/api/invoices/{id}/pay';

  /**
   * Procesar pago de factura.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerProcessPayment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerProcessPayment$Response(params: InvoiceControllerProcessPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceResponseDto>> {
    return invoiceControllerProcessPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * Procesar pago de factura.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerProcessPayment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerProcessPayment(params: InvoiceControllerProcessPayment$Params, context?: HttpContext): Observable<InvoiceResponseDto> {
    return this.invoiceControllerProcessPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceResponseDto>): InvoiceResponseDto => r.body)
    );
  }

  /** Path part for operation `invoiceControllerCancel()` */
  static readonly InvoiceControllerCancelPath = '/api/invoices/{id}/cancel';

  /**
   * Cancelar factura.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerCancel()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerCancel$Response(params: InvoiceControllerCancel$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceResponseDto>> {
    return invoiceControllerCancel(this.http, this.rootUrl, params, context);
  }

  /**
   * Cancelar factura.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerCancel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerCancel(params: InvoiceControllerCancel$Params, context?: HttpContext): Observable<InvoiceResponseDto> {
    return this.invoiceControllerCancel$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceResponseDto>): InvoiceResponseDto => r.body)
    );
  }

}
