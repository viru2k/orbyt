/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { clientAuthControllerForgotPassword } from '../fn/client-authentication/client-auth-controller-forgot-password';
import { ClientAuthControllerForgotPassword$Params } from '../fn/client-authentication/client-auth-controller-forgot-password';
import { clientAuthControllerLogin } from '../fn/client-authentication/client-auth-controller-login';
import { ClientAuthControllerLogin$Params } from '../fn/client-authentication/client-auth-controller-login';
import { clientAuthControllerResetPassword } from '../fn/client-authentication/client-auth-controller-reset-password';
import { ClientAuthControllerResetPassword$Params } from '../fn/client-authentication/client-auth-controller-reset-password';

@Injectable({ providedIn: 'root' })
export class ClientAuthenticationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `clientAuthControllerLogin()` */
  static readonly ClientAuthControllerLoginPath = '/api/client/auth/login';

  /**
   * Login del cliente al portal.
   *
   * Autentica un cliente en el portal usando email y contraseña. Solo clientes con acceso habilitado pueden ingresar.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientAuthControllerLogin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientAuthControllerLogin$Response(params: ClientAuthControllerLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'access_token'?: string;
'client'?: {
'id'?: number;
'name'?: string;
'lastName'?: string;
'email'?: string;
'preferredName'?: string;
'membershipNumber'?: string;
'avatarUrl'?: string;
};
}>> {
    return clientAuthControllerLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * Login del cliente al portal.
   *
   * Autentica un cliente en el portal usando email y contraseña. Solo clientes con acceso habilitado pueden ingresar.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientAuthControllerLogin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientAuthControllerLogin(params: ClientAuthControllerLogin$Params, context?: HttpContext): Observable<{
'access_token'?: string;
'client'?: {
'id'?: number;
'name'?: string;
'lastName'?: string;
'email'?: string;
'preferredName'?: string;
'membershipNumber'?: string;
'avatarUrl'?: string;
};
}> {
    return this.clientAuthControllerLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'access_token'?: string;
'client'?: {
'id'?: number;
'name'?: string;
'lastName'?: string;
'email'?: string;
'preferredName'?: string;
'membershipNumber'?: string;
'avatarUrl'?: string;
};
}>): {
'access_token'?: string;
'client'?: {
'id'?: number;
'name'?: string;
'lastName'?: string;
'email'?: string;
'preferredName'?: string;
'membershipNumber'?: string;
'avatarUrl'?: string;
};
} => r.body)
    );
  }

  /** Path part for operation `clientAuthControllerForgotPassword()` */
  static readonly ClientAuthControllerForgotPasswordPath = '/api/client/auth/forgot-password';

  /**
   * Solicitar reset de contraseña.
   *
   * Envía un email con un token para resetear la contraseña del cliente. Solo funciona si el cliente tiene acceso al portal habilitado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientAuthControllerForgotPassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientAuthControllerForgotPassword$Response(params: ClientAuthControllerForgotPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'message'?: string;
}>> {
    return clientAuthControllerForgotPassword(this.http, this.rootUrl, params, context);
  }

  /**
   * Solicitar reset de contraseña.
   *
   * Envía un email con un token para resetear la contraseña del cliente. Solo funciona si el cliente tiene acceso al portal habilitado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientAuthControllerForgotPassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientAuthControllerForgotPassword(params: ClientAuthControllerForgotPassword$Params, context?: HttpContext): Observable<{
'message'?: string;
}> {
    return this.clientAuthControllerForgotPassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'message'?: string;
}>): {
'message'?: string;
} => r.body)
    );
  }

  /** Path part for operation `clientAuthControllerResetPassword()` */
  static readonly ClientAuthControllerResetPasswordPath = '/api/client/auth/reset-password';

  /**
   * Resetear contraseña.
   *
   * Confirma el reset de contraseña usando el token enviado por email.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientAuthControllerResetPassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientAuthControllerResetPassword$Response(params: ClientAuthControllerResetPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'message'?: string;
}>> {
    return clientAuthControllerResetPassword(this.http, this.rootUrl, params, context);
  }

  /**
   * Resetear contraseña.
   *
   * Confirma el reset de contraseña usando el token enviado por email.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientAuthControllerResetPassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientAuthControllerResetPassword(params: ClientAuthControllerResetPassword$Params, context?: HttpContext): Observable<{
'message'?: string;
}> {
    return this.clientAuthControllerResetPassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'message'?: string;
}>): {
'message'?: string;
} => r.body)
    );
  }

}
