/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { consultationControllerCreate } from '../fn/consultations/consultation-controller-create';
import { ConsultationControllerCreate$Params } from '../fn/consultations/consultation-controller-create';
import { consultationControllerCreateAutoTokens } from '../fn/consultations/consultation-controller-create-auto-tokens';
import { ConsultationControllerCreateAutoTokens$Params } from '../fn/consultations/consultation-controller-create-auto-tokens';
import { consultationControllerCreateToken } from '../fn/consultations/consultation-controller-create-token';
import { ConsultationControllerCreateToken$Params } from '../fn/consultations/consultation-controller-create-token';
import { consultationControllerCreateTokenByScenario } from '../fn/consultations/consultation-controller-create-token-by-scenario';
import { ConsultationControllerCreateTokenByScenario$Params } from '../fn/consultations/consultation-controller-create-token-by-scenario';
import { consultationControllerFindAll } from '../fn/consultations/consultation-controller-find-all';
import { ConsultationControllerFindAll$Params } from '../fn/consultations/consultation-controller-find-all';
import { consultationControllerFindOne } from '../fn/consultations/consultation-controller-find-one';
import { ConsultationControllerFindOne$Params } from '../fn/consultations/consultation-controller-find-one';
import { consultationControllerGetClientHistory } from '../fn/consultations/consultation-controller-get-client-history';
import { ConsultationControllerGetClientHistory$Params } from '../fn/consultations/consultation-controller-get-client-history';
import { consultationControllerGetStats } from '../fn/consultations/consultation-controller-get-stats';
import { ConsultationControllerGetStats$Params } from '../fn/consultations/consultation-controller-get-stats';
import { consultationControllerGetTodayConsultations } from '../fn/consultations/consultation-controller-get-today-consultations';
import { ConsultationControllerGetTodayConsultations$Params } from '../fn/consultations/consultation-controller-get-today-consultations';
import { consultationControllerGetTokensForConsultation } from '../fn/consultations/consultation-controller-get-tokens-for-consultation';
import { ConsultationControllerGetTokensForConsultation$Params } from '../fn/consultations/consultation-controller-get-tokens-for-consultation';
import { consultationControllerRemove } from '../fn/consultations/consultation-controller-remove';
import { ConsultationControllerRemove$Params } from '../fn/consultations/consultation-controller-remove';
import { consultationControllerRevokeToken } from '../fn/consultations/consultation-controller-revoke-token';
import { ConsultationControllerRevokeToken$Params } from '../fn/consultations/consultation-controller-revoke-token';
import { consultationControllerUpdate } from '../fn/consultations/consultation-controller-update';
import { ConsultationControllerUpdate$Params } from '../fn/consultations/consultation-controller-update';
import { consultationControllerUpdateStatus } from '../fn/consultations/consultation-controller-update-status';
import { ConsultationControllerUpdateStatus$Params } from '../fn/consultations/consultation-controller-update-status';
import { consultationControllerUploadFile } from '../fn/consultations/consultation-controller-upload-file';
import { ConsultationControllerUploadFile$Params } from '../fn/consultations/consultation-controller-upload-file';
import { ConsultationOperationResultDto } from '../models/consultation-operation-result-dto';
import { ConsultationResponseDto } from '../models/consultation-response-dto';
import { ConsultationTokenResponseDto } from '../models/consultation-token-response-dto';

@Injectable({ providedIn: 'root' })
export class ConsultationsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `consultationControllerFindAll()` */
  static readonly ConsultationControllerFindAllPath = '/consultations';

  /**
   * Listar consultas del usuario con filtros avanzados.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerFindAll$Response(params?: ConsultationControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConsultationResponseDto>>> {
    return consultationControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar consultas del usuario con filtros avanzados.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerFindAll(params?: ConsultationControllerFindAll$Params, context?: HttpContext): Observable<Array<ConsultationResponseDto>> {
    return this.consultationControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ConsultationResponseDto>>): Array<ConsultationResponseDto> => r.body)
    );
  }

  /** Path part for operation `consultationControllerCreate()` */
  static readonly ConsultationControllerCreatePath = '/consultations';

  /**
   * Crear nueva consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationControllerCreate$Response(params: ConsultationControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationResponseDto>> {
    return consultationControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nueva consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationControllerCreate(params: ConsultationControllerCreate$Params, context?: HttpContext): Observable<ConsultationResponseDto> {
    return this.consultationControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationResponseDto>): ConsultationResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationControllerGetStats()` */
  static readonly ConsultationControllerGetStatsPath = '/consultations/stats';

  /**
   * Obtener estadísticas de consultas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerGetStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerGetStats$Response(params?: ConsultationControllerGetStats$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return consultationControllerGetStats(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener estadísticas de consultas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerGetStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerGetStats(params?: ConsultationControllerGetStats$Params, context?: HttpContext): Observable<void> {
    return this.consultationControllerGetStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `consultationControllerGetTodayConsultations()` */
  static readonly ConsultationControllerGetTodayConsultationsPath = '/consultations/today';

  /**
   * Obtener consultas de hoy.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerGetTodayConsultations()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerGetTodayConsultations$Response(params?: ConsultationControllerGetTodayConsultations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConsultationResponseDto>>> {
    return consultationControllerGetTodayConsultations(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener consultas de hoy.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerGetTodayConsultations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerGetTodayConsultations(params?: ConsultationControllerGetTodayConsultations$Params, context?: HttpContext): Observable<Array<ConsultationResponseDto>> {
    return this.consultationControllerGetTodayConsultations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ConsultationResponseDto>>): Array<ConsultationResponseDto> => r.body)
    );
  }

  /** Path part for operation `consultationControllerGetClientHistory()` */
  static readonly ConsultationControllerGetClientHistoryPath = '/consultations/client/{clientId}';

  /**
   * Obtener historial de consultas de un cliente.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerGetClientHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerGetClientHistory$Response(params: ConsultationControllerGetClientHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConsultationResponseDto>>> {
    return consultationControllerGetClientHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener historial de consultas de un cliente.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerGetClientHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerGetClientHistory(params: ConsultationControllerGetClientHistory$Params, context?: HttpContext): Observable<Array<ConsultationResponseDto>> {
    return this.consultationControllerGetClientHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ConsultationResponseDto>>): Array<ConsultationResponseDto> => r.body)
    );
  }

  /** Path part for operation `consultationControllerFindOne()` */
  static readonly ConsultationControllerFindOnePath = '/consultations/{id}';

  /**
   * Obtener consulta por ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerFindOne$Response(params: ConsultationControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationResponseDto>> {
    return consultationControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener consulta por ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerFindOne(params: ConsultationControllerFindOne$Params, context?: HttpContext): Observable<ConsultationResponseDto> {
    return this.consultationControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationResponseDto>): ConsultationResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationControllerRemove()` */
  static readonly ConsultationControllerRemovePath = '/consultations/{id}';

  /**
   * Eliminar consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerRemove$Response(params: ConsultationControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return consultationControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerRemove(params: ConsultationControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.consultationControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `consultationControllerUpdate()` */
  static readonly ConsultationControllerUpdatePath = '/consultations/{id}';

  /**
   * Actualizar consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationControllerUpdate$Response(params: ConsultationControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationResponseDto>> {
    return consultationControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationControllerUpdate(params: ConsultationControllerUpdate$Params, context?: HttpContext): Observable<ConsultationResponseDto> {
    return this.consultationControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationResponseDto>): ConsultationResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationControllerUpdateStatus()` */
  static readonly ConsultationControllerUpdateStatusPath = '/consultations/{id}/status';

  /**
   * Actualizar estado de consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerUpdateStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerUpdateStatus$Response(params: ConsultationControllerUpdateStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationResponseDto>> {
    return consultationControllerUpdateStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar estado de consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerUpdateStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerUpdateStatus(params: ConsultationControllerUpdateStatus$Params, context?: HttpContext): Observable<ConsultationResponseDto> {
    return this.consultationControllerUpdateStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationResponseDto>): ConsultationResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationControllerUploadFile()` */
  static readonly ConsultationControllerUploadFilePath = '/consultations/{id}/files';

  /**
   * Subir archivo a consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerUploadFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerUploadFile$Response(params: ConsultationControllerUploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return consultationControllerUploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Subir archivo a consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerUploadFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerUploadFile(params: ConsultationControllerUploadFile$Params, context?: HttpContext): Observable<void> {
    return this.consultationControllerUploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `consultationControllerGetTokensForConsultation()` */
  static readonly ConsultationControllerGetTokensForConsultationPath = '/consultations/{id}/tokens';

  /**
   * Obtener todos los tokens de una consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerGetTokensForConsultation()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerGetTokensForConsultation$Response(params: ConsultationControllerGetTokensForConsultation$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConsultationTokenResponseDto>>> {
    return consultationControllerGetTokensForConsultation(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los tokens de una consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerGetTokensForConsultation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerGetTokensForConsultation(params: ConsultationControllerGetTokensForConsultation$Params, context?: HttpContext): Observable<Array<ConsultationTokenResponseDto>> {
    return this.consultationControllerGetTokensForConsultation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ConsultationTokenResponseDto>>): Array<ConsultationTokenResponseDto> => r.body)
    );
  }

  /** Path part for operation `consultationControllerCreateToken()` */
  static readonly ConsultationControllerCreateTokenPath = '/consultations/{id}/tokens';

  /**
   * Crear token manual para consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerCreateToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationControllerCreateToken$Response(params: ConsultationControllerCreateToken$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationTokenResponseDto>> {
    return consultationControllerCreateToken(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear token manual para consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerCreateToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationControllerCreateToken(params: ConsultationControllerCreateToken$Params, context?: HttpContext): Observable<ConsultationTokenResponseDto> {
    return this.consultationControllerCreateToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationTokenResponseDto>): ConsultationTokenResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationControllerCreateAutoTokens()` */
  static readonly ConsultationControllerCreateAutoTokensPath = '/consultations/{id}/tokens/auto';

  /**
   * Crear tokens automáticos para consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerCreateAutoTokens()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerCreateAutoTokens$Response(params: ConsultationControllerCreateAutoTokens$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConsultationTokenResponseDto>>> {
    return consultationControllerCreateAutoTokens(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear tokens automáticos para consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerCreateAutoTokens$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerCreateAutoTokens(params: ConsultationControllerCreateAutoTokens$Params, context?: HttpContext): Observable<Array<ConsultationTokenResponseDto>> {
    return this.consultationControllerCreateAutoTokens$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ConsultationTokenResponseDto>>): Array<ConsultationTokenResponseDto> => r.body)
    );
  }

  /** Path part for operation `consultationControllerCreateTokenByScenario()` */
  static readonly ConsultationControllerCreateTokenByScenarioPath = '/consultations/{id}/tokens/scenario/{scenario}';

  /**
   * Crear token por escenario específico.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerCreateTokenByScenario()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerCreateTokenByScenario$Response(params: ConsultationControllerCreateTokenByScenario$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationTokenResponseDto>> {
    return consultationControllerCreateTokenByScenario(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear token por escenario específico.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerCreateTokenByScenario$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerCreateTokenByScenario(params: ConsultationControllerCreateTokenByScenario$Params, context?: HttpContext): Observable<ConsultationTokenResponseDto> {
    return this.consultationControllerCreateTokenByScenario$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationTokenResponseDto>): ConsultationTokenResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationControllerRevokeToken()` */
  static readonly ConsultationControllerRevokeTokenPath = '/consultations/tokens/{tokenId}';

  /**
   * Revocar token específico.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationControllerRevokeToken()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerRevokeToken$Response(params: ConsultationControllerRevokeToken$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationOperationResultDto>> {
    return consultationControllerRevokeToken(this.http, this.rootUrl, params, context);
  }

  /**
   * Revocar token específico.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationControllerRevokeToken$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationControllerRevokeToken(params: ConsultationControllerRevokeToken$Params, context?: HttpContext): Observable<ConsultationOperationResultDto> {
    return this.consultationControllerRevokeToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationOperationResultDto>): ConsultationOperationResultDto => r.body)
    );
  }

}
