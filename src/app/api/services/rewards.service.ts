/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ClientResponseDto } from '../models/client-response-dto';
import { CustomerRewardResponseDto } from '../models/customer-reward-response-dto';
import { RewardProgramResponseDto } from '../models/reward-program-response-dto';
import { rewardsControllerCleanupExpiredRewards } from '../fn/rewards/rewards-controller-cleanup-expired-rewards';
import { RewardsControllerCleanupExpiredRewards$Params } from '../fn/rewards/rewards-controller-cleanup-expired-rewards';
import { rewardsControllerCreateRewardProgram } from '../fn/rewards/rewards-controller-create-reward-program';
import { RewardsControllerCreateRewardProgram$Params } from '../fn/rewards/rewards-controller-create-reward-program';
import { rewardsControllerDeleteRewardProgram } from '../fn/rewards/rewards-controller-delete-reward-program';
import { RewardsControllerDeleteRewardProgram$Params } from '../fn/rewards/rewards-controller-delete-reward-program';
import { rewardsControllerGetActiveRewardPrograms } from '../fn/rewards/rewards-controller-get-active-reward-programs';
import { RewardsControllerGetActiveRewardPrograms$Params } from '../fn/rewards/rewards-controller-get-active-reward-programs';
import { rewardsControllerGetAllRewardPrograms } from '../fn/rewards/rewards-controller-get-all-reward-programs';
import { RewardsControllerGetAllRewardPrograms$Params } from '../fn/rewards/rewards-controller-get-all-reward-programs';
import { rewardsControllerGetClientActiveRewards } from '../fn/rewards/rewards-controller-get-client-active-rewards';
import { RewardsControllerGetClientActiveRewards$Params } from '../fn/rewards/rewards-controller-get-client-active-rewards';
import { rewardsControllerGetClientEarnedRewards } from '../fn/rewards/rewards-controller-get-client-earned-rewards';
import { RewardsControllerGetClientEarnedRewards$Params } from '../fn/rewards/rewards-controller-get-client-earned-rewards';
import { rewardsControllerGetClientRewardHistory } from '../fn/rewards/rewards-controller-get-client-reward-history';
import { RewardsControllerGetClientRewardHistory$Params } from '../fn/rewards/rewards-controller-get-client-reward-history';
import { rewardsControllerGetClientRewards } from '../fn/rewards/rewards-controller-get-client-rewards';
import { RewardsControllerGetClientRewards$Params } from '../fn/rewards/rewards-controller-get-client-rewards';
import { rewardsControllerGetRewardProgramById } from '../fn/rewards/rewards-controller-get-reward-program-by-id';
import { RewardsControllerGetRewardProgramById$Params } from '../fn/rewards/rewards-controller-get-reward-program-by-id';
import { rewardsControllerGetRewardProgramsByBusinessType } from '../fn/rewards/rewards-controller-get-reward-programs-by-business-type';
import { RewardsControllerGetRewardProgramsByBusinessType$Params } from '../fn/rewards/rewards-controller-get-reward-programs-by-business-type';
import { rewardsControllerGetRewardsMetrics } from '../fn/rewards/rewards-controller-get-rewards-metrics';
import { RewardsControllerGetRewardsMetrics$Params } from '../fn/rewards/rewards-controller-get-rewards-metrics';
import { rewardsControllerRedeemReward } from '../fn/rewards/rewards-controller-redeem-reward';
import { RewardsControllerRedeemReward$Params } from '../fn/rewards/rewards-controller-redeem-reward';
import { rewardsControllerSearchClientsForRewards } from '../fn/rewards/rewards-controller-search-clients-for-rewards';
import { RewardsControllerSearchClientsForRewards$Params } from '../fn/rewards/rewards-controller-search-clients-for-rewards';
import { rewardsControllerTriggerAppointmentCompleted } from '../fn/rewards/rewards-controller-trigger-appointment-completed';
import { RewardsControllerTriggerAppointmentCompleted$Params } from '../fn/rewards/rewards-controller-trigger-appointment-completed';
import { rewardsControllerTriggerConsultationCompleted } from '../fn/rewards/rewards-controller-trigger-consultation-completed';
import { RewardsControllerTriggerConsultationCompleted$Params } from '../fn/rewards/rewards-controller-trigger-consultation-completed';
import { rewardsControllerTriggerPurchaseCompleted } from '../fn/rewards/rewards-controller-trigger-purchase-completed';
import { RewardsControllerTriggerPurchaseCompleted$Params } from '../fn/rewards/rewards-controller-trigger-purchase-completed';
import { rewardsControllerTriggerServiceCompleted } from '../fn/rewards/rewards-controller-trigger-service-completed';
import { RewardsControllerTriggerServiceCompleted$Params } from '../fn/rewards/rewards-controller-trigger-service-completed';
import { rewardsControllerUpdateRewardProgram } from '../fn/rewards/rewards-controller-update-reward-program';
import { RewardsControllerUpdateRewardProgram$Params } from '../fn/rewards/rewards-controller-update-reward-program';
import { RewardsMetricsDto } from '../models/rewards-metrics-dto';

@Injectable({ providedIn: 'root' })
export class RewardsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rewardsControllerGetAllRewardPrograms()` */
  static readonly RewardsControllerGetAllRewardProgramsPath = '/rewards/programs';

  /**
   * Obtener todos los programas de recompensas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetAllRewardPrograms()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetAllRewardPrograms$Response(params?: RewardsControllerGetAllRewardPrograms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RewardProgramResponseDto>>> {
    return rewardsControllerGetAllRewardPrograms(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los programas de recompensas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetAllRewardPrograms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetAllRewardPrograms(params?: RewardsControllerGetAllRewardPrograms$Params, context?: HttpContext): Observable<Array<RewardProgramResponseDto>> {
    return this.rewardsControllerGetAllRewardPrograms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RewardProgramResponseDto>>): Array<RewardProgramResponseDto> => r.body)
    );
  }

  /** Path part for operation `rewardsControllerCreateRewardProgram()` */
  static readonly RewardsControllerCreateRewardProgramPath = '/rewards/programs';

  /**
   * Crear nuevo programa de recompensas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerCreateRewardProgram()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rewardsControllerCreateRewardProgram$Response(params: RewardsControllerCreateRewardProgram$Params, context?: HttpContext): Observable<StrictHttpResponse<RewardProgramResponseDto>> {
    return rewardsControllerCreateRewardProgram(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nuevo programa de recompensas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerCreateRewardProgram$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rewardsControllerCreateRewardProgram(params: RewardsControllerCreateRewardProgram$Params, context?: HttpContext): Observable<RewardProgramResponseDto> {
    return this.rewardsControllerCreateRewardProgram$Response(params, context).pipe(
      map((r: StrictHttpResponse<RewardProgramResponseDto>): RewardProgramResponseDto => r.body)
    );
  }

  /** Path part for operation `rewardsControllerGetActiveRewardPrograms()` */
  static readonly RewardsControllerGetActiveRewardProgramsPath = '/rewards/programs/active';

  /**
   * Obtener programas de recompensas activos.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetActiveRewardPrograms()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetActiveRewardPrograms$Response(params?: RewardsControllerGetActiveRewardPrograms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RewardProgramResponseDto>>> {
    return rewardsControllerGetActiveRewardPrograms(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener programas de recompensas activos.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetActiveRewardPrograms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetActiveRewardPrograms(params?: RewardsControllerGetActiveRewardPrograms$Params, context?: HttpContext): Observable<Array<RewardProgramResponseDto>> {
    return this.rewardsControllerGetActiveRewardPrograms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RewardProgramResponseDto>>): Array<RewardProgramResponseDto> => r.body)
    );
  }

  /** Path part for operation `rewardsControllerGetRewardProgramsByBusinessType()` */
  static readonly RewardsControllerGetRewardProgramsByBusinessTypePath = '/rewards/programs/business-type/{businessTypeId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetRewardProgramsByBusinessType()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetRewardProgramsByBusinessType$Response(params: RewardsControllerGetRewardProgramsByBusinessType$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerGetRewardProgramsByBusinessType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetRewardProgramsByBusinessType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetRewardProgramsByBusinessType(params: RewardsControllerGetRewardProgramsByBusinessType$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerGetRewardProgramsByBusinessType$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerGetRewardProgramById()` */
  static readonly RewardsControllerGetRewardProgramByIdPath = '/rewards/programs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetRewardProgramById()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetRewardProgramById$Response(params: RewardsControllerGetRewardProgramById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerGetRewardProgramById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetRewardProgramById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetRewardProgramById(params: RewardsControllerGetRewardProgramById$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerGetRewardProgramById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerDeleteRewardProgram()` */
  static readonly RewardsControllerDeleteRewardProgramPath = '/rewards/programs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerDeleteRewardProgram()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerDeleteRewardProgram$Response(params: RewardsControllerDeleteRewardProgram$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerDeleteRewardProgram(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerDeleteRewardProgram$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerDeleteRewardProgram(params: RewardsControllerDeleteRewardProgram$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerDeleteRewardProgram$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerUpdateRewardProgram()` */
  static readonly RewardsControllerUpdateRewardProgramPath = '/rewards/programs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerUpdateRewardProgram()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rewardsControllerUpdateRewardProgram$Response(params: RewardsControllerUpdateRewardProgram$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerUpdateRewardProgram(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerUpdateRewardProgram$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rewardsControllerUpdateRewardProgram(params: RewardsControllerUpdateRewardProgram$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerUpdateRewardProgram$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerGetClientRewards()` */
  static readonly RewardsControllerGetClientRewardsPath = '/rewards/customer/{clientId}';

  /**
   * Obtener todas las recompensas de un cliente.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetClientRewards()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetClientRewards$Response(params: RewardsControllerGetClientRewards$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CustomerRewardResponseDto>>> {
    return rewardsControllerGetClientRewards(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todas las recompensas de un cliente.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetClientRewards$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetClientRewards(params: RewardsControllerGetClientRewards$Params, context?: HttpContext): Observable<Array<CustomerRewardResponseDto>> {
    return this.rewardsControllerGetClientRewards$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CustomerRewardResponseDto>>): Array<CustomerRewardResponseDto> => r.body)
    );
  }

  /** Path part for operation `rewardsControllerGetClientActiveRewards()` */
  static readonly RewardsControllerGetClientActiveRewardsPath = '/rewards/customer/{clientId}/active';

  /**
   * Obtener recompensas activas (en progreso) de un cliente.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetClientActiveRewards()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetClientActiveRewards$Response(params: RewardsControllerGetClientActiveRewards$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CustomerRewardResponseDto>>> {
    return rewardsControllerGetClientActiveRewards(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener recompensas activas (en progreso) de un cliente.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetClientActiveRewards$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetClientActiveRewards(params: RewardsControllerGetClientActiveRewards$Params, context?: HttpContext): Observable<Array<CustomerRewardResponseDto>> {
    return this.rewardsControllerGetClientActiveRewards$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CustomerRewardResponseDto>>): Array<CustomerRewardResponseDto> => r.body)
    );
  }

  /** Path part for operation `rewardsControllerGetClientEarnedRewards()` */
  static readonly RewardsControllerGetClientEarnedRewardsPath = '/rewards/customer/{clientId}/earned';

  /**
   * Obtener recompensas ganadas de un cliente.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetClientEarnedRewards()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetClientEarnedRewards$Response(params: RewardsControllerGetClientEarnedRewards$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CustomerRewardResponseDto>>> {
    return rewardsControllerGetClientEarnedRewards(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener recompensas ganadas de un cliente.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetClientEarnedRewards$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetClientEarnedRewards(params: RewardsControllerGetClientEarnedRewards$Params, context?: HttpContext): Observable<Array<CustomerRewardResponseDto>> {
    return this.rewardsControllerGetClientEarnedRewards$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CustomerRewardResponseDto>>): Array<CustomerRewardResponseDto> => r.body)
    );
  }

  /** Path part for operation `rewardsControllerGetClientRewardHistory()` */
  static readonly RewardsControllerGetClientRewardHistoryPath = '/rewards/customer/{clientId}/history';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetClientRewardHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetClientRewardHistory$Response(params: RewardsControllerGetClientRewardHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerGetClientRewardHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetClientRewardHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetClientRewardHistory(params: RewardsControllerGetClientRewardHistory$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerGetClientRewardHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerRedeemReward()` */
  static readonly RewardsControllerRedeemRewardPath = '/rewards/customer/{clientId}/redeem/{rewardId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerRedeemReward()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerRedeemReward$Response(params: RewardsControllerRedeemReward$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerRedeemReward(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerRedeemReward$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerRedeemReward(params: RewardsControllerRedeemReward$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerRedeemReward$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerGetRewardsMetrics()` */
  static readonly RewardsControllerGetRewardsMetricsPath = '/rewards/metrics';

  /**
   * Obtener métricas del sistema de recompensas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerGetRewardsMetrics()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetRewardsMetrics$Response(params?: RewardsControllerGetRewardsMetrics$Params, context?: HttpContext): Observable<StrictHttpResponse<RewardsMetricsDto>> {
    return rewardsControllerGetRewardsMetrics(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener métricas del sistema de recompensas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerGetRewardsMetrics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerGetRewardsMetrics(params?: RewardsControllerGetRewardsMetrics$Params, context?: HttpContext): Observable<RewardsMetricsDto> {
    return this.rewardsControllerGetRewardsMetrics$Response(params, context).pipe(
      map((r: StrictHttpResponse<RewardsMetricsDto>): RewardsMetricsDto => r.body)
    );
  }

  /** Path part for operation `rewardsControllerSearchClientsForRewards()` */
  static readonly RewardsControllerSearchClientsForRewardsPath = '/rewards/client-search';

  /**
   * Buscar clientes para el sistema de recompensas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerSearchClientsForRewards()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerSearchClientsForRewards$Response(params: RewardsControllerSearchClientsForRewards$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ClientResponseDto>>> {
    return rewardsControllerSearchClientsForRewards(this.http, this.rootUrl, params, context);
  }

  /**
   * Buscar clientes para el sistema de recompensas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerSearchClientsForRewards$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerSearchClientsForRewards(params: RewardsControllerSearchClientsForRewards$Params, context?: HttpContext): Observable<Array<ClientResponseDto>> {
    return this.rewardsControllerSearchClientsForRewards$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ClientResponseDto>>): Array<ClientResponseDto> => r.body)
    );
  }

  /** Path part for operation `rewardsControllerTriggerAppointmentCompleted()` */
  static readonly RewardsControllerTriggerAppointmentCompletedPath = '/rewards/trigger/appointment-completed/{clientId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerTriggerAppointmentCompleted()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerTriggerAppointmentCompleted$Response(params: RewardsControllerTriggerAppointmentCompleted$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerTriggerAppointmentCompleted(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerTriggerAppointmentCompleted$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerTriggerAppointmentCompleted(params: RewardsControllerTriggerAppointmentCompleted$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerTriggerAppointmentCompleted$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerTriggerConsultationCompleted()` */
  static readonly RewardsControllerTriggerConsultationCompletedPath = '/rewards/trigger/consultation-completed/{clientId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerTriggerConsultationCompleted()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerTriggerConsultationCompleted$Response(params: RewardsControllerTriggerConsultationCompleted$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerTriggerConsultationCompleted(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerTriggerConsultationCompleted$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerTriggerConsultationCompleted(params: RewardsControllerTriggerConsultationCompleted$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerTriggerConsultationCompleted$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerTriggerServiceCompleted()` */
  static readonly RewardsControllerTriggerServiceCompletedPath = '/rewards/trigger/service-completed/{clientId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerTriggerServiceCompleted()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerTriggerServiceCompleted$Response(params: RewardsControllerTriggerServiceCompleted$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerTriggerServiceCompleted(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerTriggerServiceCompleted$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerTriggerServiceCompleted(params: RewardsControllerTriggerServiceCompleted$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerTriggerServiceCompleted$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerTriggerPurchaseCompleted()` */
  static readonly RewardsControllerTriggerPurchaseCompletedPath = '/rewards/trigger/purchase-completed/{clientId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerTriggerPurchaseCompleted()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerTriggerPurchaseCompleted$Response(params: RewardsControllerTriggerPurchaseCompleted$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerTriggerPurchaseCompleted(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerTriggerPurchaseCompleted$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerTriggerPurchaseCompleted(params: RewardsControllerTriggerPurchaseCompleted$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerTriggerPurchaseCompleted$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `rewardsControllerCleanupExpiredRewards()` */
  static readonly RewardsControllerCleanupExpiredRewardsPath = '/rewards/cleanup/expired';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rewardsControllerCleanupExpiredRewards()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerCleanupExpiredRewards$Response(params?: RewardsControllerCleanupExpiredRewards$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rewardsControllerCleanupExpiredRewards(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rewardsControllerCleanupExpiredRewards$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rewardsControllerCleanupExpiredRewards(params?: RewardsControllerCleanupExpiredRewards$Params, context?: HttpContext): Observable<void> {
    return this.rewardsControllerCleanupExpiredRewards$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
