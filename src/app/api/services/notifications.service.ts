/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { notificationControllerCreateNotification } from '../fn/notifications/notification-controller-create-notification';
import { NotificationControllerCreateNotification$Params } from '../fn/notifications/notification-controller-create-notification';
import { notificationControllerGetAll } from '../fn/notifications/notification-controller-get-all';
import { NotificationControllerGetAll$Params } from '../fn/notifications/notification-controller-get-all';
import { notificationControllerGetFailed } from '../fn/notifications/notification-controller-get-failed';
import { NotificationControllerGetFailed$Params } from '../fn/notifications/notification-controller-get-failed';
import { notificationControllerGetSummary } from '../fn/notifications/notification-controller-get-summary';
import { NotificationControllerGetSummary$Params } from '../fn/notifications/notification-controller-get-summary';
import { notificationControllerGetUnread } from '../fn/notifications/notification-controller-get-unread';
import { NotificationControllerGetUnread$Params } from '../fn/notifications/notification-controller-get-unread';
import { notificationControllerMarkAsRead } from '../fn/notifications/notification-controller-mark-as-read';
import { NotificationControllerMarkAsRead$Params } from '../fn/notifications/notification-controller-mark-as-read';
import { notificationControllerRetry } from '../fn/notifications/notification-controller-retry';
import { NotificationControllerRetry$Params } from '../fn/notifications/notification-controller-retry';
import { NotificationResponseDto } from '../models/notification-response-dto';
import { NotificationSummaryResponseDto } from '../models/notification-summary-response-dto';

@Injectable({ providedIn: 'root' })
export class NotificationsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `notificationControllerGetAll()` */
  static readonly NotificationControllerGetAllPath = '/notifications';

  /**
   * Obtener todas las notificaciones del usuario.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationControllerGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerGetAll$Response(params?: NotificationControllerGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NotificationResponseDto>>> {
    return notificationControllerGetAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todas las notificaciones del usuario.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationControllerGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerGetAll(params?: NotificationControllerGetAll$Params, context?: HttpContext): Observable<Array<NotificationResponseDto>> {
    return this.notificationControllerGetAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NotificationResponseDto>>): Array<NotificationResponseDto> => r.body)
    );
  }

  /** Path part for operation `notificationControllerCreateNotification()` */
  static readonly NotificationControllerCreateNotificationPath = '/notifications';

  /**
   * Crear una notificación manual.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationControllerCreateNotification()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationControllerCreateNotification$Response(params: NotificationControllerCreateNotification$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return notificationControllerCreateNotification(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear una notificación manual.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationControllerCreateNotification$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationControllerCreateNotification(params: NotificationControllerCreateNotification$Params, context?: HttpContext): Observable<void> {
    return this.notificationControllerCreateNotification$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `notificationControllerMarkAsRead()` */
  static readonly NotificationControllerMarkAsReadPath = '/notifications/{id}/read';

  /**
   * Marcar una notificación como leída.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationControllerMarkAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerMarkAsRead$Response(params: NotificationControllerMarkAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return notificationControllerMarkAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * Marcar una notificación como leída.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationControllerMarkAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerMarkAsRead(params: NotificationControllerMarkAsRead$Params, context?: HttpContext): Observable<any> {
    return this.notificationControllerMarkAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `notificationControllerGetFailed()` */
  static readonly NotificationControllerGetFailedPath = '/notifications/failed';

  /**
   * Listar notificaciones fallidas (admin).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationControllerGetFailed()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerGetFailed$Response(params?: NotificationControllerGetFailed$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return notificationControllerGetFailed(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar notificaciones fallidas (admin).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationControllerGetFailed$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerGetFailed(params?: NotificationControllerGetFailed$Params, context?: HttpContext): Observable<void> {
    return this.notificationControllerGetFailed$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `notificationControllerRetry()` */
  static readonly NotificationControllerRetryPath = '/notifications/retry/{id}';

  /**
   * Reintentar envío de notificación fallida.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationControllerRetry()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerRetry$Response(params: NotificationControllerRetry$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return notificationControllerRetry(this.http, this.rootUrl, params, context);
  }

  /**
   * Reintentar envío de notificación fallida.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationControllerRetry$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerRetry(params: NotificationControllerRetry$Params, context?: HttpContext): Observable<void> {
    return this.notificationControllerRetry$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `notificationControllerGetUnread()` */
  static readonly NotificationControllerGetUnreadPath = '/notifications/unread';

  /**
   * Obtener notificaciones no leídas del usuario actual.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationControllerGetUnread()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerGetUnread$Response(params?: NotificationControllerGetUnread$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return notificationControllerGetUnread(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener notificaciones no leídas del usuario actual.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationControllerGetUnread$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerGetUnread(params?: NotificationControllerGetUnread$Params, context?: HttpContext): Observable<void> {
    return this.notificationControllerGetUnread$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `notificationControllerGetSummary()` */
  static readonly NotificationControllerGetSummaryPath = '/notifications/summary';

  /**
   * Resumen de notificaciones para dashboard.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationControllerGetSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerGetSummary$Response(params?: NotificationControllerGetSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationSummaryResponseDto>> {
    return notificationControllerGetSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Resumen de notificaciones para dashboard.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationControllerGetSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationControllerGetSummary(params?: NotificationControllerGetSummary$Params, context?: HttpContext): Observable<NotificationSummaryResponseDto> {
    return this.notificationControllerGetSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationSummaryResponseDto>): NotificationSummaryResponseDto => r.body)
    );
  }

}
