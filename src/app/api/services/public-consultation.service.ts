/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { publicConsultationControllerAccessConsultationByToken } from '../fn/public-consultation/public-consultation-controller-access-consultation-by-token';
import { PublicConsultationControllerAccessConsultationByToken$Params } from '../fn/public-consultation/public-consultation-controller-access-consultation-by-token';
import { publicConsultationControllerGetTokenInfo } from '../fn/public-consultation/public-consultation-controller-get-token-info';
import { PublicConsultationControllerGetTokenInfo$Params } from '../fn/public-consultation/public-consultation-controller-get-token-info';
import { publicConsultationControllerUseTokenAndAccessConsultation } from '../fn/public-consultation/public-consultation-controller-use-token-and-access-consultation';
import { PublicConsultationControllerUseTokenAndAccessConsultation$Params } from '../fn/public-consultation/public-consultation-controller-use-token-and-access-consultation';
import { publicConsultationControllerValidateToken } from '../fn/public-consultation/public-consultation-controller-validate-token';
import { PublicConsultationControllerValidateToken$Params } from '../fn/public-consultation/public-consultation-controller-validate-token';

@Injectable({ providedIn: 'root' })
export class PublicConsultationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `publicConsultationControllerAccessConsultationByToken()` */
  static readonly PublicConsultationControllerAccessConsultationByTokenPath = '/api/public/consultations/access/{token}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicConsultationControllerAccessConsultationByToken()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicConsultationControllerAccessConsultationByToken$Response(params: PublicConsultationControllerAccessConsultationByToken$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return publicConsultationControllerAccessConsultationByToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicConsultationControllerAccessConsultationByToken$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicConsultationControllerAccessConsultationByToken(params: PublicConsultationControllerAccessConsultationByToken$Params, context?: HttpContext): Observable<void> {
    return this.publicConsultationControllerAccessConsultationByToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `publicConsultationControllerUseTokenAndAccessConsultation()` */
  static readonly PublicConsultationControllerUseTokenAndAccessConsultationPath = '/api/public/consultations/access/{token}/use';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicConsultationControllerUseTokenAndAccessConsultation()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicConsultationControllerUseTokenAndAccessConsultation$Response(params: PublicConsultationControllerUseTokenAndAccessConsultation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return publicConsultationControllerUseTokenAndAccessConsultation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicConsultationControllerUseTokenAndAccessConsultation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicConsultationControllerUseTokenAndAccessConsultation(params: PublicConsultationControllerUseTokenAndAccessConsultation$Params, context?: HttpContext): Observable<void> {
    return this.publicConsultationControllerUseTokenAndAccessConsultation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `publicConsultationControllerValidateToken()` */
  static readonly PublicConsultationControllerValidateTokenPath = '/api/public/consultations/validate/{token}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicConsultationControllerValidateToken()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicConsultationControllerValidateToken$Response(params: PublicConsultationControllerValidateToken$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return publicConsultationControllerValidateToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicConsultationControllerValidateToken$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicConsultationControllerValidateToken(params: PublicConsultationControllerValidateToken$Params, context?: HttpContext): Observable<void> {
    return this.publicConsultationControllerValidateToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `publicConsultationControllerGetTokenInfo()` */
  static readonly PublicConsultationControllerGetTokenInfoPath = '/api/public/consultations/info/{token}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicConsultationControllerGetTokenInfo()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicConsultationControllerGetTokenInfo$Response(params: PublicConsultationControllerGetTokenInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return publicConsultationControllerGetTokenInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicConsultationControllerGetTokenInfo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicConsultationControllerGetTokenInfo(params: PublicConsultationControllerGetTokenInfo$Params, context?: HttpContext): Observable<void> {
    return this.publicConsultationControllerGetTokenInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
