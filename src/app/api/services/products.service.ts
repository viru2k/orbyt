/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { productControllerCreate } from '../fn/products/product-controller-create';
import { ProductControllerCreate$Params } from '../fn/products/product-controller-create';
import { productControllerFindAll } from '../fn/products/product-controller-find-all';
import { ProductControllerFindAll$Params } from '../fn/products/product-controller-find-all';
import { productControllerFindOne } from '../fn/products/product-controller-find-one';
import { ProductControllerFindOne$Params } from '../fn/products/product-controller-find-one';
import { productControllerRemove } from '../fn/products/product-controller-remove';
import { ProductControllerRemove$Params } from '../fn/products/product-controller-remove';
import { productControllerSearchProducts } from '../fn/products/product-controller-search-products';
import { ProductControllerSearchProducts$Params } from '../fn/products/product-controller-search-products';
import { productControllerToggle } from '../fn/products/product-controller-toggle';
import { ProductControllerToggle$Params } from '../fn/products/product-controller-toggle';
import { productControllerUpdate } from '../fn/products/product-controller-update';
import { ProductControllerUpdate$Params } from '../fn/products/product-controller-update';
import { ProductResponseDto } from '../models/product-response-dto';
import { ProductSearchResponseDto } from '../models/product-search-response-dto';

@Injectable({ providedIn: 'root' })
export class ProductsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `productControllerFindAll()` */
  static readonly ProductControllerFindAllPath = '/products';

  /**
   * Listar productos (admin puede ver los de un sub-usuario).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerFindAll$Response(params?: ProductControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductResponseDto>>> {
    return productControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar productos (admin puede ver los de un sub-usuario).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerFindAll(params?: ProductControllerFindAll$Params, context?: HttpContext): Observable<Array<ProductResponseDto>> {
    return this.productControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductResponseDto>>): Array<ProductResponseDto> => r.body)
    );
  }

  /** Path part for operation `productControllerCreate()` */
  static readonly ProductControllerCreatePath = '/products';

  /**
   * Crear un nuevo producto.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productControllerCreate$Response(params: ProductControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponseDto>> {
    return productControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un nuevo producto.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productControllerCreate(params: ProductControllerCreate$Params, context?: HttpContext): Observable<ProductResponseDto> {
    return this.productControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponseDto>): ProductResponseDto => r.body)
    );
  }

  /** Path part for operation `productControllerSearchProducts()` */
  static readonly ProductControllerSearchProductsPath = '/products/search';

  /**
   * Buscar productos con filtros y paginación.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerSearchProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerSearchProducts$Response(params?: ProductControllerSearchProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductSearchResponseDto>> {
    return productControllerSearchProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * Buscar productos con filtros y paginación.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerSearchProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerSearchProducts(params?: ProductControllerSearchProducts$Params, context?: HttpContext): Observable<ProductSearchResponseDto> {
    return this.productControllerSearchProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductSearchResponseDto>): ProductSearchResponseDto => r.body)
    );
  }

  /** Path part for operation `productControllerFindOne()` */
  static readonly ProductControllerFindOnePath = '/products/{id}';

  /**
   * Obtener detalles de un producto (admin puede ver los de un sub-usuario).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerFindOne$Response(params: ProductControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponseDto>> {
    return productControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener detalles de un producto (admin puede ver los de un sub-usuario).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerFindOne(params: ProductControllerFindOne$Params, context?: HttpContext): Observable<ProductResponseDto> {
    return this.productControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponseDto>): ProductResponseDto => r.body)
    );
  }

  /** Path part for operation `productControllerRemove()` */
  static readonly ProductControllerRemovePath = '/products/{id}';

  /**
   * Eliminar un producto.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerRemove$Response(params: ProductControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar un producto.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerRemove(params: ProductControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.productControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productControllerUpdate()` */
  static readonly ProductControllerUpdatePath = '/products/{id}';

  /**
   * Actualizar un producto.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productControllerUpdate$Response(params: ProductControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponseDto>> {
    return productControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un producto.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productControllerUpdate(params: ProductControllerUpdate$Params, context?: HttpContext): Observable<ProductResponseDto> {
    return this.productControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponseDto>): ProductResponseDto => r.body)
    );
  }

  /** Path part for operation `productControllerToggle()` */
  static readonly ProductControllerTogglePath = '/products/{id}/toggle';

  /**
   * Alternar estado activo/inactivo de un producto.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerToggle()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerToggle$Response(params: ProductControllerToggle$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponseDto>> {
    return productControllerToggle(this.http, this.rootUrl, params, context);
  }

  /**
   * Alternar estado activo/inactivo de un producto.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerToggle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerToggle(params: ProductControllerToggle$Params, context?: HttpContext): Observable<ProductResponseDto> {
    return this.productControllerToggle$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponseDto>): ProductResponseDto => r.body)
    );
  }

}
