/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AgendaConfigResponseDto } from '../models/agenda-config-response-dto';
import { agendaControllerAddHoliday } from '../fn/agenda/agenda-controller-add-holiday';
import { AgendaControllerAddHoliday$Params } from '../fn/agenda/agenda-controller-add-holiday';
import { agendaControllerBlockMultipleDates } from '../fn/agenda/agenda-controller-block-multiple-dates';
import { AgendaControllerBlockMultipleDates$Params } from '../fn/agenda/agenda-controller-block-multiple-dates';
import { agendaControllerBook } from '../fn/agenda/agenda-controller-book';
import { AgendaControllerBook$Params } from '../fn/agenda/agenda-controller-book';
import { agendaControllerBulkConfigUpdate } from '../fn/agenda/agenda-controller-bulk-config-update';
import { AgendaControllerBulkConfigUpdate$Params } from '../fn/agenda/agenda-controller-bulk-config-update';
import { agendaControllerCreate } from '../fn/agenda/agenda-controller-create';
import { AgendaControllerCreate$Params } from '../fn/agenda/agenda-controller-create';
import { agendaControllerCreateDayOverride } from '../fn/agenda/agenda-controller-create-day-override';
import { AgendaControllerCreateDayOverride$Params } from '../fn/agenda/agenda-controller-create-day-override';
import { agendaControllerDeleteAppointment } from '../fn/agenda/agenda-controller-delete-appointment';
import { AgendaControllerDeleteAppointment$Params } from '../fn/agenda/agenda-controller-delete-appointment';
import { agendaControllerDeleteHoliday } from '../fn/agenda/agenda-controller-delete-holiday';
import { AgendaControllerDeleteHoliday$Params } from '../fn/agenda/agenda-controller-delete-holiday';
import { agendaControllerGetAppointments } from '../fn/agenda/agenda-controller-get-appointments';
import { AgendaControllerGetAppointments$Params } from '../fn/agenda/agenda-controller-get-appointments';
import { agendaControllerGetAvailabilityRange } from '../fn/agenda/agenda-controller-get-availability-range';
import { AgendaControllerGetAvailabilityRange$Params } from '../fn/agenda/agenda-controller-get-availability-range';
import { agendaControllerGetAvailable } from '../fn/agenda/agenda-controller-get-available';
import { AgendaControllerGetAvailable$Params } from '../fn/agenda/agenda-controller-get-available';
import { agendaControllerGetCalendarAvailability } from '../fn/agenda/agenda-controller-get-calendar-availability';
import { AgendaControllerGetCalendarAvailability$Params } from '../fn/agenda/agenda-controller-get-calendar-availability';
import { agendaControllerGetConfig } from '../fn/agenda/agenda-controller-get-config';
import { AgendaControllerGetConfig$Params } from '../fn/agenda/agenda-controller-get-config';
import { agendaControllerGetDayOverrides } from '../fn/agenda/agenda-controller-get-day-overrides';
import { AgendaControllerGetDayOverrides$Params } from '../fn/agenda/agenda-controller-get-day-overrides';
import { agendaControllerGetHolidays } from '../fn/agenda/agenda-controller-get-holidays';
import { AgendaControllerGetHolidays$Params } from '../fn/agenda/agenda-controller-get-holidays';
import { agendaControllerGetProductsUsed } from '../fn/agenda/agenda-controller-get-products-used';
import { AgendaControllerGetProductsUsed$Params } from '../fn/agenda/agenda-controller-get-products-used';
import { agendaControllerGetSummary } from '../fn/agenda/agenda-controller-get-summary';
import { AgendaControllerGetSummary$Params } from '../fn/agenda/agenda-controller-get-summary';
import { agendaControllerGetToday } from '../fn/agenda/agenda-controller-get-today';
import { AgendaControllerGetToday$Params } from '../fn/agenda/agenda-controller-get-today';
import { agendaControllerGetWeek } from '../fn/agenda/agenda-controller-get-week';
import { AgendaControllerGetWeek$Params } from '../fn/agenda/agenda-controller-get-week';
import { agendaControllerRegisterProductsUsed } from '../fn/agenda/agenda-controller-register-products-used';
import { AgendaControllerRegisterProductsUsed$Params } from '../fn/agenda/agenda-controller-register-products-used';
import { agendaControllerTestSimple } from '../fn/agenda/agenda-controller-test-simple';
import { AgendaControllerTestSimple$Params } from '../fn/agenda/agenda-controller-test-simple';
import { agendaControllerUnblockDates } from '../fn/agenda/agenda-controller-unblock-dates';
import { AgendaControllerUnblockDates$Params } from '../fn/agenda/agenda-controller-unblock-dates';
import { agendaControllerUpdate } from '../fn/agenda/agenda-controller-update';
import { AgendaControllerUpdate$Params } from '../fn/agenda/agenda-controller-update';
import { agendaControllerUpdateConfig } from '../fn/agenda/agenda-controller-update-config';
import { AgendaControllerUpdateConfig$Params } from '../fn/agenda/agenda-controller-update-config';
import { agendaControllerUpdateConfigTest } from '../fn/agenda/agenda-controller-update-config-test';
import { AgendaControllerUpdateConfigTest$Params } from '../fn/agenda/agenda-controller-update-config-test';
import { AppointmentProductLogResponseDto } from '../models/appointment-product-log-response-dto';
import { AppointmentResponseDto } from '../models/appointment-response-dto';
import { AppointmentSummaryResponseDto } from '../models/appointment-summary-response-dto';
import { AvailableSlotResponseDto } from '../models/available-slot-response-dto';
import { CalendarAvailabilityDto } from '../models/calendar-availability-dto';
import { HolidayResponseDto } from '../models/holiday-response-dto';

@Injectable({ providedIn: 'root' })
export class AgendaService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `agendaControllerGetAppointments()` */
  static readonly AgendaControllerGetAppointmentsPath = '/api/agenda';

  /**
   * Obtener turnos por diversos filtros (fecha, rango, estado, profesional).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetAppointments()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetAppointments$Response(params?: AgendaControllerGetAppointments$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AppointmentResponseDto>>> {
    return agendaControllerGetAppointments(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener turnos por diversos filtros (fecha, rango, estado, profesional).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetAppointments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetAppointments(params?: AgendaControllerGetAppointments$Params, context?: HttpContext): Observable<Array<AppointmentResponseDto>> {
    return this.agendaControllerGetAppointments$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AppointmentResponseDto>>): Array<AppointmentResponseDto> => r.body)
    );
  }

  /** Path part for operation `agendaControllerCreate()` */
  static readonly AgendaControllerCreatePath = '/api/agenda';

  /**
   * Crear un turno manual.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerCreate$Response(params: AgendaControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<AppointmentResponseDto>> {
    return agendaControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un turno manual.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerCreate(params: AgendaControllerCreate$Params, context?: HttpContext): Observable<AppointmentResponseDto> {
    return this.agendaControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppointmentResponseDto>): AppointmentResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerDeleteAppointment()` */
  static readonly AgendaControllerDeleteAppointmentPath = '/api/agenda/{id}';

  /**
   * Eliminar un turno (o marcarlo como cancelado).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerDeleteAppointment()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerDeleteAppointment$Response(params: AgendaControllerDeleteAppointment$Params, context?: HttpContext): Observable<StrictHttpResponse<AppointmentResponseDto>> {
    return agendaControllerDeleteAppointment(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar un turno (o marcarlo como cancelado).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerDeleteAppointment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerDeleteAppointment(params: AgendaControllerDeleteAppointment$Params, context?: HttpContext): Observable<AppointmentResponseDto> {
    return this.agendaControllerDeleteAppointment$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppointmentResponseDto>): AppointmentResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerUpdate()` */
  static readonly AgendaControllerUpdatePath = '/api/agenda/{id}';

  /**
   * Actualizar un turno existente.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerUpdate$Response(params: AgendaControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<AppointmentResponseDto>> {
    return agendaControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un turno existente.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerUpdate(params: AgendaControllerUpdate$Params, context?: HttpContext): Observable<AppointmentResponseDto> {
    return this.agendaControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppointmentResponseDto>): AppointmentResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerBook()` */
  static readonly AgendaControllerBookPath = '/api/agenda/book';

  /**
   * Reservar un turno en un slot disponible (cliente o profesional).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerBook$Response(params: AgendaControllerBook$Params, context?: HttpContext): Observable<StrictHttpResponse<AppointmentResponseDto>> {
    return agendaControllerBook(this.http, this.rootUrl, params, context);
  }

  /**
   * Reservar un turno en un slot disponible (cliente o profesional).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerBook(params: AgendaControllerBook$Params, context?: HttpContext): Observable<AppointmentResponseDto> {
    return this.agendaControllerBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppointmentResponseDto>): AppointmentResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetAvailable()` */
  static readonly AgendaControllerGetAvailablePath = '/api/agenda/available';

  /**
   * Ver slots disponibles para un día y profesional.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetAvailable()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetAvailable$Response(params: AgendaControllerGetAvailable$Params, context?: HttpContext): Observable<StrictHttpResponse<AvailableSlotResponseDto>> {
    return agendaControllerGetAvailable(this.http, this.rootUrl, params, context);
  }

  /**
   * Ver slots disponibles para un día y profesional.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetAvailable$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetAvailable(params: AgendaControllerGetAvailable$Params, context?: HttpContext): Observable<AvailableSlotResponseDto> {
    return this.agendaControllerGetAvailable$Response(params, context).pipe(
      map((r: StrictHttpResponse<AvailableSlotResponseDto>): AvailableSlotResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetConfig()` */
  static readonly AgendaControllerGetConfigPath = '/api/agenda/config';

  /**
   * Obtener configuración de agenda del profesional actual (o especificado).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetConfig()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetConfig$Response(params?: AgendaControllerGetConfig$Params, context?: HttpContext): Observable<StrictHttpResponse<AgendaConfigResponseDto>> {
    return agendaControllerGetConfig(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener configuración de agenda del profesional actual (o especificado).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetConfig$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetConfig(params?: AgendaControllerGetConfig$Params, context?: HttpContext): Observable<AgendaConfigResponseDto> {
    return this.agendaControllerGetConfig$Response(params, context).pipe(
      map((r: StrictHttpResponse<AgendaConfigResponseDto>): AgendaConfigResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerUpdateConfigTest()` */
  static readonly AgendaControllerUpdateConfigTestPath = '/api/agenda/config-test';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerUpdateConfigTest()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerUpdateConfigTest$Response(params: AgendaControllerUpdateConfigTest$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerUpdateConfigTest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerUpdateConfigTest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerUpdateConfigTest(params: AgendaControllerUpdateConfigTest$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerUpdateConfigTest$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerTestSimple()` */
  static readonly AgendaControllerTestSimplePath = '/api/agenda/test-simple';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerTestSimple()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerTestSimple$Response(params?: AgendaControllerTestSimple$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerTestSimple(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerTestSimple$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerTestSimple(params?: AgendaControllerTestSimple$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerTestSimple$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerUpdateConfig()` */
  static readonly AgendaControllerUpdateConfigPath = '/api/agenda/config/update';

  /**
   * Actualizar configuración de agenda del profesional actual (o especificado).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerUpdateConfig()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerUpdateConfig$Response(params: AgendaControllerUpdateConfig$Params, context?: HttpContext): Observable<StrictHttpResponse<AgendaConfigResponseDto>> {
    return agendaControllerUpdateConfig(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar configuración de agenda del profesional actual (o especificado).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerUpdateConfig$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerUpdateConfig(params: AgendaControllerUpdateConfig$Params, context?: HttpContext): Observable<AgendaConfigResponseDto> {
    return this.agendaControllerUpdateConfig$Response(params, context).pipe(
      map((r: StrictHttpResponse<AgendaConfigResponseDto>): AgendaConfigResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerAddHoliday()` */
  static readonly AgendaControllerAddHolidayPath = '/api/agenda/holiday';

  /**
   * Agregar feriado para un profesional.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerAddHoliday()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerAddHoliday$Response(params: AgendaControllerAddHoliday$Params, context?: HttpContext): Observable<StrictHttpResponse<HolidayResponseDto>> {
    return agendaControllerAddHoliday(this.http, this.rootUrl, params, context);
  }

  /**
   * Agregar feriado para un profesional.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerAddHoliday$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerAddHoliday(params: AgendaControllerAddHoliday$Params, context?: HttpContext): Observable<HolidayResponseDto> {
    return this.agendaControllerAddHoliday$Response(params, context).pipe(
      map((r: StrictHttpResponse<HolidayResponseDto>): HolidayResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetHolidays()` */
  static readonly AgendaControllerGetHolidaysPath = '/api/agenda/holidays';

  /**
   * Listar feriados de un profesional.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetHolidays()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetHolidays$Response(params?: AgendaControllerGetHolidays$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HolidayResponseDto>>> {
    return agendaControllerGetHolidays(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar feriados de un profesional.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetHolidays$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetHolidays(params?: AgendaControllerGetHolidays$Params, context?: HttpContext): Observable<Array<HolidayResponseDto>> {
    return this.agendaControllerGetHolidays$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HolidayResponseDto>>): Array<HolidayResponseDto> => r.body)
    );
  }

  /** Path part for operation `agendaControllerDeleteHoliday()` */
  static readonly AgendaControllerDeleteHolidayPath = '/api/agenda/holiday/{id}';

  /**
   * Eliminar día festivo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerDeleteHoliday()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerDeleteHoliday$Response(params: AgendaControllerDeleteHoliday$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerDeleteHoliday(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar día festivo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerDeleteHoliday$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerDeleteHoliday(params: AgendaControllerDeleteHoliday$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerDeleteHoliday$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetSummary()` */
  static readonly AgendaControllerGetSummaryPath = '/api/agenda/summary';

  /**
   * Resumen de citas por estado y día para un profesional.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetSummary$Response(params: AgendaControllerGetSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<AppointmentSummaryResponseDto>> {
    return agendaControllerGetSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Resumen de citas por estado y día para un profesional.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetSummary(params: AgendaControllerGetSummary$Params, context?: HttpContext): Observable<AppointmentSummaryResponseDto> {
    return this.agendaControllerGetSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppointmentSummaryResponseDto>): AppointmentSummaryResponseDto => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetToday()` */
  static readonly AgendaControllerGetTodayPath = '/api/agenda/today';

  /**
   * Turnos del día actual del profesional logueado (o especificado).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetToday()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetToday$Response(params?: AgendaControllerGetToday$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AppointmentResponseDto>>> {
    return agendaControllerGetToday(this.http, this.rootUrl, params, context);
  }

  /**
   * Turnos del día actual del profesional logueado (o especificado).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetToday$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetToday(params?: AgendaControllerGetToday$Params, context?: HttpContext): Observable<Array<AppointmentResponseDto>> {
    return this.agendaControllerGetToday$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AppointmentResponseDto>>): Array<AppointmentResponseDto> => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetWeek()` */
  static readonly AgendaControllerGetWeekPath = '/api/agenda/week';

  /**
   * Turnos de la semana actual del profesional logueado (o especificado).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetWeek()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetWeek$Response(params?: AgendaControllerGetWeek$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AppointmentResponseDto>>> {
    return agendaControllerGetWeek(this.http, this.rootUrl, params, context);
  }

  /**
   * Turnos de la semana actual del profesional logueado (o especificado).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetWeek$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetWeek(params?: AgendaControllerGetWeek$Params, context?: HttpContext): Observable<Array<AppointmentResponseDto>> {
    return this.agendaControllerGetWeek$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AppointmentResponseDto>>): Array<AppointmentResponseDto> => r.body)
    );
  }

  /** Path part for operation `agendaControllerRegisterProductsUsed()` */
  static readonly AgendaControllerRegisterProductsUsedPath = '/api/agenda/{id}/products-used';

  /**
   * Registrar productos utilizados en la cita.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerRegisterProductsUsed()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerRegisterProductsUsed$Response(params: AgendaControllerRegisterProductsUsed$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerRegisterProductsUsed(this.http, this.rootUrl, params, context);
  }

  /**
   * Registrar productos utilizados en la cita.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerRegisterProductsUsed$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerRegisterProductsUsed(params: AgendaControllerRegisterProductsUsed$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerRegisterProductsUsed$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetProductsUsed()` */
  static readonly AgendaControllerGetProductsUsedPath = '/api/agenda/{id}/products';

  /**
   * Obtener productos utilizados en una cita.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetProductsUsed()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetProductsUsed$Response(params: AgendaControllerGetProductsUsed$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AppointmentProductLogResponseDto>>> {
    return agendaControllerGetProductsUsed(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener productos utilizados en una cita.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetProductsUsed$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetProductsUsed(params: AgendaControllerGetProductsUsed$Params, context?: HttpContext): Observable<Array<AppointmentProductLogResponseDto>> {
    return this.agendaControllerGetProductsUsed$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AppointmentProductLogResponseDto>>): Array<AppointmentProductLogResponseDto> => r.body)
    );
  }

  /** Path part for operation `agendaControllerBlockMultipleDates()` */
  static readonly AgendaControllerBlockMultipleDatesPath = '/api/agenda/block-dates';

  /**
   * Bloquear múltiples fechas (vacaciones, días libres).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerBlockMultipleDates()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerBlockMultipleDates$Response(params: AgendaControllerBlockMultipleDates$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerBlockMultipleDates(this.http, this.rootUrl, params, context);
  }

  /**
   * Bloquear múltiples fechas (vacaciones, días libres).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerBlockMultipleDates$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerBlockMultipleDates(params: AgendaControllerBlockMultipleDates$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerBlockMultipleDates$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerUnblockDates()` */
  static readonly AgendaControllerUnblockDatesPath = '/api/agenda/block-dates';

  /**
   * Desbloquear fechas específicas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerUnblockDates()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerUnblockDates$Response(params: AgendaControllerUnblockDates$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerUnblockDates(this.http, this.rootUrl, params, context);
  }

  /**
   * Desbloquear fechas específicas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerUnblockDates$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerUnblockDates(params: AgendaControllerUnblockDates$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerUnblockDates$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerCreateDayOverride()` */
  static readonly AgendaControllerCreateDayOverridePath = '/api/agenda/day-override';

  /**
   * Configurar horario especial para un día específico.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerCreateDayOverride()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerCreateDayOverride$Response(params: AgendaControllerCreateDayOverride$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerCreateDayOverride(this.http, this.rootUrl, params, context);
  }

  /**
   * Configurar horario especial para un día específico.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerCreateDayOverride$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerCreateDayOverride(params: AgendaControllerCreateDayOverride$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerCreateDayOverride$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetDayOverrides()` */
  static readonly AgendaControllerGetDayOverridesPath = '/api/agenda/day-overrides';

  /**
   * Listar overrides de días específicos.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetDayOverrides()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetDayOverrides$Response(params?: AgendaControllerGetDayOverrides$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerGetDayOverrides(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar overrides de días específicos.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetDayOverrides$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetDayOverrides(params?: AgendaControllerGetDayOverrides$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerGetDayOverrides$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerBulkConfigUpdate()` */
  static readonly AgendaControllerBulkConfigUpdatePath = '/api/agenda/bulk-config';

  /**
   * Actualización masiva de configuración para rango de fechas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerBulkConfigUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerBulkConfigUpdate$Response(params: AgendaControllerBulkConfigUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerBulkConfigUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualización masiva de configuración para rango de fechas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerBulkConfigUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  agendaControllerBulkConfigUpdate(params: AgendaControllerBulkConfigUpdate$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerBulkConfigUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetAvailabilityRange()` */
  static readonly AgendaControllerGetAvailabilityRangePath = '/api/agenda/availability-range';

  /**
   * Obtener disponibilidad para un rango de fechas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetAvailabilityRange()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetAvailabilityRange$Response(params: AgendaControllerGetAvailabilityRange$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return agendaControllerGetAvailabilityRange(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener disponibilidad para un rango de fechas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetAvailabilityRange$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetAvailabilityRange(params: AgendaControllerGetAvailabilityRange$Params, context?: HttpContext): Observable<void> {
    return this.agendaControllerGetAvailabilityRange$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `agendaControllerGetCalendarAvailability()` */
  static readonly AgendaControllerGetCalendarAvailabilityPath = '/api/agenda/calendar-availability';

  /**
   * Obtener disponibilidad del calendario mensual.
   *
   * Retorna la disponibilidad de cada día del mes con estados: disponible, limitado, lleno, bloqueado, feriado, pasado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `agendaControllerGetCalendarAvailability()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetCalendarAvailability$Response(params: AgendaControllerGetCalendarAvailability$Params, context?: HttpContext): Observable<StrictHttpResponse<CalendarAvailabilityDto>> {
    return agendaControllerGetCalendarAvailability(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener disponibilidad del calendario mensual.
   *
   * Retorna la disponibilidad de cada día del mes con estados: disponible, limitado, lleno, bloqueado, feriado, pasado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `agendaControllerGetCalendarAvailability$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  agendaControllerGetCalendarAvailability(params: AgendaControllerGetCalendarAvailability$Params, context?: HttpContext): Observable<CalendarAvailabilityDto> {
    return this.agendaControllerGetCalendarAvailability$Response(params, context).pipe(
      map((r: StrictHttpResponse<CalendarAvailabilityDto>): CalendarAvailabilityDto => r.body)
    );
  }

}
