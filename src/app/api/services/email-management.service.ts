/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BulkEmailResponseDto } from '../models/bulk-email-response-dto';
import { emailControllerCleanQueue } from '../fn/email-management/email-controller-clean-queue';
import { EmailControllerCleanQueue$Params } from '../fn/email-management/email-controller-clean-queue';
import { emailControllerCreateEmailSettings } from '../fn/email-management/email-controller-create-email-settings';
import { EmailControllerCreateEmailSettings$Params } from '../fn/email-management/email-controller-create-email-settings';
import { emailControllerCreateTemplate } from '../fn/email-management/email-controller-create-template';
import { EmailControllerCreateTemplate$Params } from '../fn/email-management/email-controller-create-template';
import { emailControllerDeleteTemplate } from '../fn/email-management/email-controller-delete-template';
import { EmailControllerDeleteTemplate$Params } from '../fn/email-management/email-controller-delete-template';
import { emailControllerGetAllTemplates } from '../fn/email-management/email-controller-get-all-templates';
import { EmailControllerGetAllTemplates$Params } from '../fn/email-management/email-controller-get-all-templates';
import { emailControllerGetEmailLogs } from '../fn/email-management/email-controller-get-email-logs';
import { EmailControllerGetEmailLogs$Params } from '../fn/email-management/email-controller-get-email-logs';
import { emailControllerGetEmailMetrics } from '../fn/email-management/email-controller-get-email-metrics';
import { EmailControllerGetEmailMetrics$Params } from '../fn/email-management/email-controller-get-email-metrics';
import { emailControllerGetEmailSettings } from '../fn/email-management/email-controller-get-email-settings';
import { EmailControllerGetEmailSettings$Params } from '../fn/email-management/email-controller-get-email-settings';
import { emailControllerGetFailedEmails } from '../fn/email-management/email-controller-get-failed-emails';
import { EmailControllerGetFailedEmails$Params } from '../fn/email-management/email-controller-get-failed-emails';
import { emailControllerGetMetricsSummary } from '../fn/email-management/email-controller-get-metrics-summary';
import { EmailControllerGetMetricsSummary$Params } from '../fn/email-management/email-controller-get-metrics-summary';
import { emailControllerGetQueueStats } from '../fn/email-management/email-controller-get-queue-stats';
import { EmailControllerGetQueueStats$Params } from '../fn/email-management/email-controller-get-queue-stats';
import { emailControllerGetTemplateById } from '../fn/email-management/email-controller-get-template-by-id';
import { EmailControllerGetTemplateById$Params } from '../fn/email-management/email-controller-get-template-by-id';
import { emailControllerPauseQueue } from '../fn/email-management/email-controller-pause-queue';
import { EmailControllerPauseQueue$Params } from '../fn/email-management/email-controller-pause-queue';
import { emailControllerResumeQueue } from '../fn/email-management/email-controller-resume-queue';
import { EmailControllerResumeQueue$Params } from '../fn/email-management/email-controller-resume-queue';
import { emailControllerRetryFailedEmail } from '../fn/email-management/email-controller-retry-failed-email';
import { EmailControllerRetryFailedEmail$Params } from '../fn/email-management/email-controller-retry-failed-email';
import { emailControllerSaveEmailSettings } from '../fn/email-management/email-controller-save-email-settings';
import { EmailControllerSaveEmailSettings$Params } from '../fn/email-management/email-controller-save-email-settings';
import { emailControllerSendAppointmentReminder } from '../fn/email-management/email-controller-send-appointment-reminder';
import { EmailControllerSendAppointmentReminder$Params } from '../fn/email-management/email-controller-send-appointment-reminder';
import { emailControllerSendBulkEmails } from '../fn/email-management/email-controller-send-bulk-emails';
import { EmailControllerSendBulkEmails$Params } from '../fn/email-management/email-controller-send-bulk-emails';
import { emailControllerSendCustomEmail } from '../fn/email-management/email-controller-send-custom-email';
import { EmailControllerSendCustomEmail$Params } from '../fn/email-management/email-controller-send-custom-email';
import { emailControllerSendPasswordResetEmail } from '../fn/email-management/email-controller-send-password-reset-email';
import { EmailControllerSendPasswordResetEmail$Params } from '../fn/email-management/email-controller-send-password-reset-email';
import { emailControllerSendTemplateEmail } from '../fn/email-management/email-controller-send-template-email';
import { EmailControllerSendTemplateEmail$Params } from '../fn/email-management/email-controller-send-template-email';
import { emailControllerSendWelcomeEmail } from '../fn/email-management/email-controller-send-welcome-email';
import { EmailControllerSendWelcomeEmail$Params } from '../fn/email-management/email-controller-send-welcome-email';
import { emailControllerTestSmtpConnection } from '../fn/email-management/email-controller-test-smtp-connection';
import { EmailControllerTestSmtpConnection$Params } from '../fn/email-management/email-controller-test-smtp-connection';
import { emailControllerTrackEmailClick } from '../fn/email-management/email-controller-track-email-click';
import { EmailControllerTrackEmailClick$Params } from '../fn/email-management/email-controller-track-email-click';
import { emailControllerTrackEmailOpen } from '../fn/email-management/email-controller-track-email-open';
import { EmailControllerTrackEmailOpen$Params } from '../fn/email-management/email-controller-track-email-open';
import { emailControllerUpdateEmailSettings } from '../fn/email-management/email-controller-update-email-settings';
import { EmailControllerUpdateEmailSettings$Params } from '../fn/email-management/email-controller-update-email-settings';
import { emailControllerUpdateTemplate } from '../fn/email-management/email-controller-update-template';
import { EmailControllerUpdateTemplate$Params } from '../fn/email-management/email-controller-update-template';
import { emailControllerValidateSmtpSettings } from '../fn/email-management/email-controller-validate-smtp-settings';
import { EmailControllerValidateSmtpSettings$Params } from '../fn/email-management/email-controller-validate-smtp-settings';
import { EmailLogResponseDto } from '../models/email-log-response-dto';
import { EmailLogsPaginatedResponseDto } from '../models/email-logs-paginated-response-dto';
import { EmailMetricsResponseDto } from '../models/email-metrics-response-dto';
import { EmailMetricsSummaryDto } from '../models/email-metrics-summary-dto';
import { EmailOperationResultDto } from '../models/email-operation-result-dto';
import { EmailSendResponseDto } from '../models/email-send-response-dto';
import { EmailSettingsResponseDto } from '../models/email-settings-response-dto';
import { EmailTemplateResponseDto } from '../models/email-template-response-dto';
import { TestConnectionResponseDto } from '../models/test-connection-response-dto';

@Injectable({ providedIn: 'root' })
export class EmailManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `emailControllerGetEmailSettings()` */
  static readonly EmailControllerGetEmailSettingsPath = '/email/settings';

  /**
   * Obtener configuraci贸n SMTP actual.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerGetEmailSettings()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetEmailSettings$Response(params?: EmailControllerGetEmailSettings$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSettingsResponseDto>> {
    return emailControllerGetEmailSettings(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener configuraci贸n SMTP actual.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerGetEmailSettings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetEmailSettings(params?: EmailControllerGetEmailSettings$Params, context?: HttpContext): Observable<EmailSettingsResponseDto> {
    return this.emailControllerGetEmailSettings$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSettingsResponseDto>): EmailSettingsResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerCreateEmailSettings()` */
  static readonly EmailControllerCreateEmailSettingsPath = '/email/settings';

  /**
   * Crear nueva configuraci贸n SMTP.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerCreateEmailSettings()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerCreateEmailSettings$Response(params: EmailControllerCreateEmailSettings$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSettingsResponseDto>> {
    return emailControllerCreateEmailSettings(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nueva configuraci贸n SMTP.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerCreateEmailSettings$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerCreateEmailSettings(params: EmailControllerCreateEmailSettings$Params, context?: HttpContext): Observable<EmailSettingsResponseDto> {
    return this.emailControllerCreateEmailSettings$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSettingsResponseDto>): EmailSettingsResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerSaveEmailSettings()` */
  static readonly EmailControllerSaveEmailSettingsPath = '/email/settings/save';

  /**
   * Guardar configuraci贸n SMTP (m茅todo legacy).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerSaveEmailSettings()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerSaveEmailSettings$Response(params: EmailControllerSaveEmailSettings$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return emailControllerSaveEmailSettings(this.http, this.rootUrl, params, context);
  }

  /**
   * Guardar configuraci贸n SMTP (m茅todo legacy).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerSaveEmailSettings$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerSaveEmailSettings(params: EmailControllerSaveEmailSettings$Params, context?: HttpContext): Observable<void> {
    return this.emailControllerSaveEmailSettings$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `emailControllerValidateSmtpSettings()` */
  static readonly EmailControllerValidateSmtpSettingsPath = '/email/settings/validate';

  /**
   * Validar configuraci贸n SMTP sin guardar.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerValidateSmtpSettings()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerValidateSmtpSettings$Response(params: EmailControllerValidateSmtpSettings$Params, context?: HttpContext): Observable<StrictHttpResponse<TestConnectionResponseDto>> {
    return emailControllerValidateSmtpSettings(this.http, this.rootUrl, params, context);
  }

  /**
   * Validar configuraci贸n SMTP sin guardar.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerValidateSmtpSettings$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerValidateSmtpSettings(params: EmailControllerValidateSmtpSettings$Params, context?: HttpContext): Observable<TestConnectionResponseDto> {
    return this.emailControllerValidateSmtpSettings$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestConnectionResponseDto>): TestConnectionResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerUpdateEmailSettings()` */
  static readonly EmailControllerUpdateEmailSettingsPath = '/email/settings/{id}';

  /**
   * Actualizar configuraci贸n SMTP.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerUpdateEmailSettings()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerUpdateEmailSettings$Response(params: EmailControllerUpdateEmailSettings$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return emailControllerUpdateEmailSettings(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar configuraci贸n SMTP.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerUpdateEmailSettings$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerUpdateEmailSettings(params: EmailControllerUpdateEmailSettings$Params, context?: HttpContext): Observable<void> {
    return this.emailControllerUpdateEmailSettings$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `emailControllerTestSmtpConnection()` */
  static readonly EmailControllerTestSmtpConnectionPath = '/email/settings/test';

  /**
   * Probar conexi贸n SMTP.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerTestSmtpConnection()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerTestSmtpConnection$Response(params?: EmailControllerTestSmtpConnection$Params, context?: HttpContext): Observable<StrictHttpResponse<TestConnectionResponseDto>> {
    return emailControllerTestSmtpConnection(this.http, this.rootUrl, params, context);
  }

  /**
   * Probar conexi贸n SMTP.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerTestSmtpConnection$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerTestSmtpConnection(params?: EmailControllerTestSmtpConnection$Params, context?: HttpContext): Observable<TestConnectionResponseDto> {
    return this.emailControllerTestSmtpConnection$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestConnectionResponseDto>): TestConnectionResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerGetAllTemplates()` */
  static readonly EmailControllerGetAllTemplatesPath = '/email/templates';

  /**
   * Listar todas las plantillas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerGetAllTemplates()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetAllTemplates$Response(params?: EmailControllerGetAllTemplates$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EmailTemplateResponseDto>>> {
    return emailControllerGetAllTemplates(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todas las plantillas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerGetAllTemplates$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetAllTemplates(params?: EmailControllerGetAllTemplates$Params, context?: HttpContext): Observable<Array<EmailTemplateResponseDto>> {
    return this.emailControllerGetAllTemplates$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EmailTemplateResponseDto>>): Array<EmailTemplateResponseDto> => r.body)
    );
  }

  /** Path part for operation `emailControllerCreateTemplate()` */
  static readonly EmailControllerCreateTemplatePath = '/email/templates';

  /**
   * Crear nueva plantilla.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerCreateTemplate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerCreateTemplate$Response(params: EmailControllerCreateTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailTemplateResponseDto>> {
    return emailControllerCreateTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nueva plantilla.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerCreateTemplate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerCreateTemplate(params: EmailControllerCreateTemplate$Params, context?: HttpContext): Observable<EmailTemplateResponseDto> {
    return this.emailControllerCreateTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailTemplateResponseDto>): EmailTemplateResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerGetTemplateById()` */
  static readonly EmailControllerGetTemplateByIdPath = '/email/templates/{id}';

  /**
   * Obtener plantilla por ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerGetTemplateById()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetTemplateById$Response(params: EmailControllerGetTemplateById$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailTemplateResponseDto>> {
    return emailControllerGetTemplateById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener plantilla por ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerGetTemplateById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetTemplateById(params: EmailControllerGetTemplateById$Params, context?: HttpContext): Observable<EmailTemplateResponseDto> {
    return this.emailControllerGetTemplateById$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailTemplateResponseDto>): EmailTemplateResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerUpdateTemplate()` */
  static readonly EmailControllerUpdateTemplatePath = '/email/templates/{id}';

  /**
   * Actualizar plantilla.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerUpdateTemplate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerUpdateTemplate$Response(params: EmailControllerUpdateTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailTemplateResponseDto>> {
    return emailControllerUpdateTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar plantilla.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerUpdateTemplate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerUpdateTemplate(params: EmailControllerUpdateTemplate$Params, context?: HttpContext): Observable<EmailTemplateResponseDto> {
    return this.emailControllerUpdateTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailTemplateResponseDto>): EmailTemplateResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerDeleteTemplate()` */
  static readonly EmailControllerDeleteTemplatePath = '/email/templates/{id}';

  /**
   * Eliminar plantilla.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerDeleteTemplate()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerDeleteTemplate$Response(params: EmailControllerDeleteTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return emailControllerDeleteTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar plantilla.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerDeleteTemplate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerDeleteTemplate(params: EmailControllerDeleteTemplate$Params, context?: HttpContext): Observable<void> {
    return this.emailControllerDeleteTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `emailControllerSendCustomEmail()` */
  static readonly EmailControllerSendCustomEmailPath = '/email/send';

  /**
   * Enviar email personalizado.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerSendCustomEmail()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerSendCustomEmail$Response(params: EmailControllerSendCustomEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSendResponseDto>> {
    return emailControllerSendCustomEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * Enviar email personalizado.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerSendCustomEmail$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerSendCustomEmail(params: EmailControllerSendCustomEmail$Params, context?: HttpContext): Observable<EmailSendResponseDto> {
    return this.emailControllerSendCustomEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSendResponseDto>): EmailSendResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerSendTemplateEmail()` */
  static readonly EmailControllerSendTemplateEmailPath = '/email/send/template';

  /**
   * Enviar email usando plantilla.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerSendTemplateEmail()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerSendTemplateEmail$Response(params: EmailControllerSendTemplateEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSendResponseDto>> {
    return emailControllerSendTemplateEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * Enviar email usando plantilla.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerSendTemplateEmail$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerSendTemplateEmail(params: EmailControllerSendTemplateEmail$Params, context?: HttpContext): Observable<EmailSendResponseDto> {
    return this.emailControllerSendTemplateEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSendResponseDto>): EmailSendResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerSendBulkEmails()` */
  static readonly EmailControllerSendBulkEmailsPath = '/email/send/bulk';

  /**
   * Env铆o masivo de emails.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerSendBulkEmails()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerSendBulkEmails$Response(params: EmailControllerSendBulkEmails$Params, context?: HttpContext): Observable<StrictHttpResponse<BulkEmailResponseDto>> {
    return emailControllerSendBulkEmails(this.http, this.rootUrl, params, context);
  }

  /**
   * Env铆o masivo de emails.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerSendBulkEmails$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  emailControllerSendBulkEmails(params: EmailControllerSendBulkEmails$Params, context?: HttpContext): Observable<BulkEmailResponseDto> {
    return this.emailControllerSendBulkEmails$Response(params, context).pipe(
      map((r: StrictHttpResponse<BulkEmailResponseDto>): BulkEmailResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerSendWelcomeEmail()` */
  static readonly EmailControllerSendWelcomeEmailPath = '/email/send/welcome/{userId}';

  /**
   * Enviar email de bienvenida.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerSendWelcomeEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerSendWelcomeEmail$Response(params: EmailControllerSendWelcomeEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSendResponseDto>> {
    return emailControllerSendWelcomeEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * Enviar email de bienvenida.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerSendWelcomeEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerSendWelcomeEmail(params: EmailControllerSendWelcomeEmail$Params, context?: HttpContext): Observable<EmailSendResponseDto> {
    return this.emailControllerSendWelcomeEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSendResponseDto>): EmailSendResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerSendPasswordResetEmail()` */
  static readonly EmailControllerSendPasswordResetEmailPath = '/email/send/password-reset/{userId}';

  /**
   * Enviar email de reset de contrase帽a.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerSendPasswordResetEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerSendPasswordResetEmail$Response(params: EmailControllerSendPasswordResetEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSendResponseDto>> {
    return emailControllerSendPasswordResetEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * Enviar email de reset de contrase帽a.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerSendPasswordResetEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerSendPasswordResetEmail(params: EmailControllerSendPasswordResetEmail$Params, context?: HttpContext): Observable<EmailSendResponseDto> {
    return this.emailControllerSendPasswordResetEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSendResponseDto>): EmailSendResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerSendAppointmentReminder()` */
  static readonly EmailControllerSendAppointmentReminderPath = '/email/send/appointment-reminder/{appointmentId}';

  /**
   * Enviar recordatorio de cita.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerSendAppointmentReminder()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerSendAppointmentReminder$Response(params: EmailControllerSendAppointmentReminder$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSendResponseDto>> {
    return emailControllerSendAppointmentReminder(this.http, this.rootUrl, params, context);
  }

  /**
   * Enviar recordatorio de cita.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerSendAppointmentReminder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerSendAppointmentReminder(params: EmailControllerSendAppointmentReminder$Params, context?: HttpContext): Observable<EmailSendResponseDto> {
    return this.emailControllerSendAppointmentReminder$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSendResponseDto>): EmailSendResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerGetEmailLogs()` */
  static readonly EmailControllerGetEmailLogsPath = '/email/logs';

  /**
   * Obtener logs de emails enviados.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerGetEmailLogs()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetEmailLogs$Response(params?: EmailControllerGetEmailLogs$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailLogsPaginatedResponseDto>> {
    return emailControllerGetEmailLogs(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener logs de emails enviados.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerGetEmailLogs$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetEmailLogs(params?: EmailControllerGetEmailLogs$Params, context?: HttpContext): Observable<EmailLogsPaginatedResponseDto> {
    return this.emailControllerGetEmailLogs$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailLogsPaginatedResponseDto>): EmailLogsPaginatedResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerGetFailedEmails()` */
  static readonly EmailControllerGetFailedEmailsPath = '/email/logs/failed';

  /**
   * Obtener emails fallidos.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerGetFailedEmails()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetFailedEmails$Response(params?: EmailControllerGetFailedEmails$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EmailLogResponseDto>>> {
    return emailControllerGetFailedEmails(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener emails fallidos.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerGetFailedEmails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetFailedEmails(params?: EmailControllerGetFailedEmails$Params, context?: HttpContext): Observable<Array<EmailLogResponseDto>> {
    return this.emailControllerGetFailedEmails$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EmailLogResponseDto>>): Array<EmailLogResponseDto> => r.body)
    );
  }

  /** Path part for operation `emailControllerRetryFailedEmail()` */
  static readonly EmailControllerRetryFailedEmailPath = '/email/logs/retry/{logId}';

  /**
   * Reintentar env铆o de email fallido.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerRetryFailedEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerRetryFailedEmail$Response(params: EmailControllerRetryFailedEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailOperationResultDto>> {
    return emailControllerRetryFailedEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * Reintentar env铆o de email fallido.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerRetryFailedEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerRetryFailedEmail(params: EmailControllerRetryFailedEmail$Params, context?: HttpContext): Observable<EmailOperationResultDto> {
    return this.emailControllerRetryFailedEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailOperationResultDto>): EmailOperationResultDto => r.body)
    );
  }

  /** Path part for operation `emailControllerGetEmailMetrics()` */
  static readonly EmailControllerGetEmailMetricsPath = '/email/metrics';

  /**
   * Obtener m茅tricas del sistema de email.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerGetEmailMetrics()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetEmailMetrics$Response(params?: EmailControllerGetEmailMetrics$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailMetricsResponseDto>> {
    return emailControllerGetEmailMetrics(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener m茅tricas del sistema de email.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerGetEmailMetrics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetEmailMetrics(params?: EmailControllerGetEmailMetrics$Params, context?: HttpContext): Observable<EmailMetricsResponseDto> {
    return this.emailControllerGetEmailMetrics$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailMetricsResponseDto>): EmailMetricsResponseDto => r.body)
    );
  }

  /** Path part for operation `emailControllerGetMetricsSummary()` */
  static readonly EmailControllerGetMetricsSummaryPath = '/email/metrics/summary';

  /**
   * Resumen r谩pido de m茅tricas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerGetMetricsSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetMetricsSummary$Response(params?: EmailControllerGetMetricsSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailMetricsSummaryDto>> {
    return emailControllerGetMetricsSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Resumen r谩pido de m茅tricas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerGetMetricsSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetMetricsSummary(params?: EmailControllerGetMetricsSummary$Params, context?: HttpContext): Observable<EmailMetricsSummaryDto> {
    return this.emailControllerGetMetricsSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailMetricsSummaryDto>): EmailMetricsSummaryDto => r.body)
    );
  }

  /** Path part for operation `emailControllerTrackEmailOpen()` */
  static readonly EmailControllerTrackEmailOpenPath = '/email/track/open/{emailId}';

  /**
   * Registrar apertura de email.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerTrackEmailOpen()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerTrackEmailOpen$Response(params: EmailControllerTrackEmailOpen$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return emailControllerTrackEmailOpen(this.http, this.rootUrl, params, context);
  }

  /**
   * Registrar apertura de email.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerTrackEmailOpen$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerTrackEmailOpen(params: EmailControllerTrackEmailOpen$Params, context?: HttpContext): Observable<void> {
    return this.emailControllerTrackEmailOpen$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `emailControllerTrackEmailClick()` */
  static readonly EmailControllerTrackEmailClickPath = '/email/track/click/{emailId}';

  /**
   * Registrar click en email.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerTrackEmailClick()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerTrackEmailClick$Response(params: EmailControllerTrackEmailClick$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return emailControllerTrackEmailClick(this.http, this.rootUrl, params, context);
  }

  /**
   * Registrar click en email.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerTrackEmailClick$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerTrackEmailClick(params: EmailControllerTrackEmailClick$Params, context?: HttpContext): Observable<void> {
    return this.emailControllerTrackEmailClick$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `emailControllerGetQueueStats()` */
  static readonly EmailControllerGetQueueStatsPath = '/email/queue/stats';

  /**
   * Obtener estad铆sticas de cola.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerGetQueueStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetQueueStats$Response(params?: EmailControllerGetQueueStats$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return emailControllerGetQueueStats(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener estad铆sticas de cola.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerGetQueueStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerGetQueueStats(params?: EmailControllerGetQueueStats$Params, context?: HttpContext): Observable<void> {
    return this.emailControllerGetQueueStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `emailControllerPauseQueue()` */
  static readonly EmailControllerPauseQueuePath = '/email/queue/pause';

  /**
   * Pausar cola de emails.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerPauseQueue()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerPauseQueue$Response(params?: EmailControllerPauseQueue$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailOperationResultDto>> {
    return emailControllerPauseQueue(this.http, this.rootUrl, params, context);
  }

  /**
   * Pausar cola de emails.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerPauseQueue$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerPauseQueue(params?: EmailControllerPauseQueue$Params, context?: HttpContext): Observable<EmailOperationResultDto> {
    return this.emailControllerPauseQueue$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailOperationResultDto>): EmailOperationResultDto => r.body)
    );
  }

  /** Path part for operation `emailControllerResumeQueue()` */
  static readonly EmailControllerResumeQueuePath = '/email/queue/resume';

  /**
   * Reanudar cola de emails.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerResumeQueue()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerResumeQueue$Response(params?: EmailControllerResumeQueue$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailOperationResultDto>> {
    return emailControllerResumeQueue(this.http, this.rootUrl, params, context);
  }

  /**
   * Reanudar cola de emails.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerResumeQueue$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerResumeQueue(params?: EmailControllerResumeQueue$Params, context?: HttpContext): Observable<EmailOperationResultDto> {
    return this.emailControllerResumeQueue$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailOperationResultDto>): EmailOperationResultDto => r.body)
    );
  }

  /** Path part for operation `emailControllerCleanQueue()` */
  static readonly EmailControllerCleanQueuePath = '/email/queue/clean';

  /**
   * Limpiar cola de emails.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `emailControllerCleanQueue()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerCleanQueue$Response(params?: EmailControllerCleanQueue$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailOperationResultDto>> {
    return emailControllerCleanQueue(this.http, this.rootUrl, params, context);
  }

  /**
   * Limpiar cola de emails.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `emailControllerCleanQueue$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  emailControllerCleanQueue(params?: EmailControllerCleanQueue$Params, context?: HttpContext): Observable<EmailOperationResultDto> {
    return this.emailControllerCleanQueue$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailOperationResultDto>): EmailOperationResultDto => r.body)
    );
  }

}
