/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { inventoryControllerGetDashboardMetrics } from '../fn/inventory-dashboard/inventory-controller-get-dashboard-metrics';
import { InventoryControllerGetDashboardMetrics$Params } from '../fn/inventory-dashboard/inventory-controller-get-dashboard-metrics';
import { inventoryControllerGetLowStockProducts } from '../fn/inventory-dashboard/inventory-controller-get-low-stock-products';
import { InventoryControllerGetLowStockProducts$Params } from '../fn/inventory-dashboard/inventory-controller-get-low-stock-products';
import { inventoryControllerGetMovementsChart } from '../fn/inventory-dashboard/inventory-controller-get-movements-chart';
import { InventoryControllerGetMovementsChart$Params } from '../fn/inventory-dashboard/inventory-controller-get-movements-chart';
import { inventoryControllerGetRecentMovements } from '../fn/inventory-dashboard/inventory-controller-get-recent-movements';
import { InventoryControllerGetRecentMovements$Params } from '../fn/inventory-dashboard/inventory-controller-get-recent-movements';
import { inventoryControllerGetStockDistribution } from '../fn/inventory-dashboard/inventory-controller-get-stock-distribution';
import { InventoryControllerGetStockDistribution$Params } from '../fn/inventory-dashboard/inventory-controller-get-stock-distribution';
import { InventoryDashboardMetricsDto } from '../models/inventory-dashboard-metrics-dto';
import { LowStockProductsDto } from '../models/low-stock-products-dto';
import { MovementsChartDto } from '../models/movements-chart-dto';
import { RecentMovementsDto } from '../models/recent-movements-dto';
import { StockDistributionDto } from '../models/stock-distribution-dto';

@Injectable({ providedIn: 'root' })
export class InventoryDashboardService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `inventoryControllerGetDashboardMetrics()` */
  static readonly InventoryControllerGetDashboardMetricsPath = '/api/inventory/dashboard/metrics';

  /**
   * Obtener métricas consolidadas del dashboard de inventario.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inventoryControllerGetDashboardMetrics()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetDashboardMetrics$Response(params?: InventoryControllerGetDashboardMetrics$Params, context?: HttpContext): Observable<StrictHttpResponse<InventoryDashboardMetricsDto>> {
    return inventoryControllerGetDashboardMetrics(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener métricas consolidadas del dashboard de inventario.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inventoryControllerGetDashboardMetrics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetDashboardMetrics(params?: InventoryControllerGetDashboardMetrics$Params, context?: HttpContext): Observable<InventoryDashboardMetricsDto> {
    return this.inventoryControllerGetDashboardMetrics$Response(params, context).pipe(
      map((r: StrictHttpResponse<InventoryDashboardMetricsDto>): InventoryDashboardMetricsDto => r.body)
    );
  }

  /** Path part for operation `inventoryControllerGetRecentMovements()` */
  static readonly InventoryControllerGetRecentMovementsPath = '/api/inventory/movements/recent';

  /**
   * Obtener movimientos recientes de inventario.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inventoryControllerGetRecentMovements()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetRecentMovements$Response(params?: InventoryControllerGetRecentMovements$Params, context?: HttpContext): Observable<StrictHttpResponse<RecentMovementsDto>> {
    return inventoryControllerGetRecentMovements(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener movimientos recientes de inventario.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inventoryControllerGetRecentMovements$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetRecentMovements(params?: InventoryControllerGetRecentMovements$Params, context?: HttpContext): Observable<RecentMovementsDto> {
    return this.inventoryControllerGetRecentMovements$Response(params, context).pipe(
      map((r: StrictHttpResponse<RecentMovementsDto>): RecentMovementsDto => r.body)
    );
  }

  /** Path part for operation `inventoryControllerGetLowStockProducts()` */
  static readonly InventoryControllerGetLowStockProductsPath = '/api/inventory/products/low-stock';

  /**
   * Obtener productos con stock bajo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inventoryControllerGetLowStockProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetLowStockProducts$Response(params?: InventoryControllerGetLowStockProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<LowStockProductsDto>> {
    return inventoryControllerGetLowStockProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener productos con stock bajo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inventoryControllerGetLowStockProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetLowStockProducts(params?: InventoryControllerGetLowStockProducts$Params, context?: HttpContext): Observable<LowStockProductsDto> {
    return this.inventoryControllerGetLowStockProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<LowStockProductsDto>): LowStockProductsDto => r.body)
    );
  }

  /** Path part for operation `inventoryControllerGetStockDistribution()` */
  static readonly InventoryControllerGetStockDistributionPath = '/api/inventory/dashboard/stock-distribution';

  /**
   * Obtener distribución del stock para gráficos.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inventoryControllerGetStockDistribution()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetStockDistribution$Response(params?: InventoryControllerGetStockDistribution$Params, context?: HttpContext): Observable<StrictHttpResponse<StockDistributionDto>> {
    return inventoryControllerGetStockDistribution(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener distribución del stock para gráficos.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inventoryControllerGetStockDistribution$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetStockDistribution(params?: InventoryControllerGetStockDistribution$Params, context?: HttpContext): Observable<StockDistributionDto> {
    return this.inventoryControllerGetStockDistribution$Response(params, context).pipe(
      map((r: StrictHttpResponse<StockDistributionDto>): StockDistributionDto => r.body)
    );
  }

  /** Path part for operation `inventoryControllerGetMovementsChart()` */
  static readonly InventoryControllerGetMovementsChartPath = '/api/inventory/dashboard/movements-chart';

  /**
   * Obtener datos de movimientos para gráfico semanal.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inventoryControllerGetMovementsChart()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetMovementsChart$Response(params?: InventoryControllerGetMovementsChart$Params, context?: HttpContext): Observable<StrictHttpResponse<MovementsChartDto>> {
    return inventoryControllerGetMovementsChart(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener datos de movimientos para gráfico semanal.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inventoryControllerGetMovementsChart$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inventoryControllerGetMovementsChart(params?: InventoryControllerGetMovementsChart$Params, context?: HttpContext): Observable<MovementsChartDto> {
    return this.inventoryControllerGetMovementsChart$Response(params, context).pipe(
      map((r: StrictHttpResponse<MovementsChartDto>): MovementsChartDto => r.body)
    );
  }

}
