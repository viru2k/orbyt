/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { serviceControllerCreate } from '../fn/services/service-controller-create';
import { ServiceControllerCreate$Params } from '../fn/services/service-controller-create';
import { serviceControllerFindAll } from '../fn/services/service-controller-find-all';
import { ServiceControllerFindAll$Params } from '../fn/services/service-controller-find-all';
import { serviceControllerFindOne } from '../fn/services/service-controller-find-one';
import { ServiceControllerFindOne$Params } from '../fn/services/service-controller-find-one';
import { serviceControllerRemove } from '../fn/services/service-controller-remove';
import { ServiceControllerRemove$Params } from '../fn/services/service-controller-remove';
import { serviceControllerUpdate } from '../fn/services/service-controller-update';
import { ServiceControllerUpdate$Params } from '../fn/services/service-controller-update';
import { ServiceListResponseDto } from '../models/service-list-response-dto';
import { ServiceResponseDto } from '../models/service-response-dto';

@Injectable({ providedIn: 'root' })
export class ServicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `serviceControllerFindAll()` */
  static readonly ServiceControllerFindAllPath = '/api/services';

  /**
   * Get all services with pagination.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceControllerFindAll$Response(params?: ServiceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceListResponseDto>> {
    return serviceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all services with pagination.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceControllerFindAll(params?: ServiceControllerFindAll$Params, context?: HttpContext): Observable<ServiceListResponseDto> {
    return this.serviceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceListResponseDto>): ServiceListResponseDto => r.body)
    );
  }

  /** Path part for operation `serviceControllerCreate()` */
  static readonly ServiceControllerCreatePath = '/api/services';

  /**
   * Create a new service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  serviceControllerCreate$Response(params: ServiceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceResponseDto>> {
    return serviceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  serviceControllerCreate(params: ServiceControllerCreate$Params, context?: HttpContext): Observable<ServiceResponseDto> {
    return this.serviceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceResponseDto>): ServiceResponseDto => r.body)
    );
  }

  /** Path part for operation `serviceControllerFindOne()` */
  static readonly ServiceControllerFindOnePath = '/api/services/{id}';

  /**
   * Get service by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceControllerFindOne$Response(params: ServiceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceResponseDto>> {
    return serviceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Get service by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceControllerFindOne(params: ServiceControllerFindOne$Params, context?: HttpContext): Observable<ServiceResponseDto> {
    return this.serviceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceResponseDto>): ServiceResponseDto => r.body)
    );
  }

  /** Path part for operation `serviceControllerUpdate()` */
  static readonly ServiceControllerUpdatePath = '/api/services/{id}';

  /**
   * Update a service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  serviceControllerUpdate$Response(params: ServiceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceResponseDto>> {
    return serviceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  serviceControllerUpdate(params: ServiceControllerUpdate$Params, context?: HttpContext): Observable<ServiceResponseDto> {
    return this.serviceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceResponseDto>): ServiceResponseDto => r.body)
    );
  }

  /** Path part for operation `serviceControllerRemove()` */
  static readonly ServiceControllerRemovePath = '/api/services/{id}';

  /**
   * Delete a service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `serviceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceControllerRemove$Response(params: ServiceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return serviceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `serviceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  serviceControllerRemove(params: ServiceControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.serviceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
