/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { FileUploadResponseDto } from '../models/file-upload-response-dto';
import { uploadControllerDeleteFile } from '../fn/upload/upload-controller-delete-file';
import { UploadControllerDeleteFile$Params } from '../fn/upload/upload-controller-delete-file';
import { uploadControllerDownloadFile } from '../fn/upload/upload-controller-download-file';
import { UploadControllerDownloadFile$Params } from '../fn/upload/upload-controller-download-file';
import { uploadControllerDownloadFileWithFilename } from '../fn/upload/upload-controller-download-file-with-filename';
import { UploadControllerDownloadFileWithFilename$Params } from '../fn/upload/upload-controller-download-file-with-filename';
import { uploadControllerGetFilesByEntity } from '../fn/upload/upload-controller-get-files-by-entity';
import { UploadControllerGetFilesByEntity$Params } from '../fn/upload/upload-controller-get-files-by-entity';
import { uploadControllerGetMyFiles } from '../fn/upload/upload-controller-get-my-files';
import { UploadControllerGetMyFiles$Params } from '../fn/upload/upload-controller-get-my-files';
import { uploadControllerGetThumbnail } from '../fn/upload/upload-controller-get-thumbnail';
import { UploadControllerGetThumbnail$Params } from '../fn/upload/upload-controller-get-thumbnail';
import { uploadControllerUploadFile } from '../fn/upload/upload-controller-upload-file';
import { UploadControllerUploadFile$Params } from '../fn/upload/upload-controller-upload-file';

@Injectable({ providedIn: 'root' })
export class UploadService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `uploadControllerUploadFile()` */
  static readonly UploadControllerUploadFilePath = '/api/upload';

  /**
   * Subir archivo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadControllerUploadFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadControllerUploadFile$Response(params: UploadControllerUploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<FileUploadResponseDto>> {
    return uploadControllerUploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Subir archivo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadControllerUploadFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadControllerUploadFile(params: UploadControllerUploadFile$Params, context?: HttpContext): Observable<FileUploadResponseDto> {
    return this.uploadControllerUploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<FileUploadResponseDto>): FileUploadResponseDto => r.body)
    );
  }

  /** Path part for operation `uploadControllerGetFilesByEntity()` */
  static readonly UploadControllerGetFilesByEntityPath = '/api/upload/entity/{entityType}/{entityId}';

  /**
   * Obtener archivos por entidad.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadControllerGetFilesByEntity()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerGetFilesByEntity$Response(params: UploadControllerGetFilesByEntity$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FileUploadResponseDto>>> {
    return uploadControllerGetFilesByEntity(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener archivos por entidad.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadControllerGetFilesByEntity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerGetFilesByEntity(params: UploadControllerGetFilesByEntity$Params, context?: HttpContext): Observable<Array<FileUploadResponseDto>> {
    return this.uploadControllerGetFilesByEntity$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FileUploadResponseDto>>): Array<FileUploadResponseDto> => r.body)
    );
  }

  /** Path part for operation `uploadControllerGetMyFiles()` */
  static readonly UploadControllerGetMyFilesPath = '/api/upload/my-files';

  /**
   * Obtener mis archivos subidos.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadControllerGetMyFiles()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerGetMyFiles$Response(params?: UploadControllerGetMyFiles$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FileUploadResponseDto>>> {
    return uploadControllerGetMyFiles(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener mis archivos subidos.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadControllerGetMyFiles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerGetMyFiles(params?: UploadControllerGetMyFiles$Params, context?: HttpContext): Observable<Array<FileUploadResponseDto>> {
    return this.uploadControllerGetMyFiles$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FileUploadResponseDto>>): Array<FileUploadResponseDto> => r.body)
    );
  }

  /** Path part for operation `uploadControllerDownloadFile()` */
  static readonly UploadControllerDownloadFilePath = '/api/upload/{id}';

  /**
   * Descargar archivo por ID (requiere autenticación).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadControllerDownloadFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerDownloadFile$Response(params: UploadControllerDownloadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadControllerDownloadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Descargar archivo por ID (requiere autenticación).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadControllerDownloadFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerDownloadFile(params: UploadControllerDownloadFile$Params, context?: HttpContext): Observable<void> {
    return this.uploadControllerDownloadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadControllerDeleteFile()` */
  static readonly UploadControllerDeleteFilePath = '/api/upload/{id}';

  /**
   * Eliminar archivo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadControllerDeleteFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerDeleteFile$Response(params: UploadControllerDeleteFile$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadControllerDeleteFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar archivo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadControllerDeleteFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerDeleteFile(params: UploadControllerDeleteFile$Params, context?: HttpContext): Observable<void> {
    return this.uploadControllerDeleteFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadControllerDownloadFileWithFilename()` */
  static readonly UploadControllerDownloadFileWithFilenamePath = '/api/upload/{id}/{filename}';

  /**
   * Servir archivo público por ID con filename SEO-friendly.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadControllerDownloadFileWithFilename()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerDownloadFileWithFilename$Response(params: UploadControllerDownloadFileWithFilename$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadControllerDownloadFileWithFilename(this.http, this.rootUrl, params, context);
  }

  /**
   * Servir archivo público por ID con filename SEO-friendly.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadControllerDownloadFileWithFilename$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerDownloadFileWithFilename(params: UploadControllerDownloadFileWithFilename$Params, context?: HttpContext): Observable<void> {
    return this.uploadControllerDownloadFileWithFilename$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadControllerGetThumbnail()` */
  static readonly UploadControllerGetThumbnailPath = '/api/upload/{id}/thumbnail';

  /**
   * Obtener thumbnail de imagen.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadControllerGetThumbnail()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerGetThumbnail$Response(params: UploadControllerGetThumbnail$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadControllerGetThumbnail(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener thumbnail de imagen.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadControllerGetThumbnail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadControllerGetThumbnail(params: UploadControllerGetThumbnail$Params, context?: HttpContext): Observable<void> {
    return this.uploadControllerGetThumbnail$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
