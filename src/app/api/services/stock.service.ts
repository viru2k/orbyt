/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { stockControllerCreate } from '../fn/stock/stock-controller-create';
import { StockControllerCreate$Params } from '../fn/stock/stock-controller-create';
import { stockControllerGetMovements } from '../fn/stock/stock-controller-get-movements';
import { StockControllerGetMovements$Params } from '../fn/stock/stock-controller-get-movements';
import { stockControllerGetSummary } from '../fn/stock/stock-controller-get-summary';
import { StockControllerGetSummary$Params } from '../fn/stock/stock-controller-get-summary';
import { StockMovementResponseDto } from '../models/stock-movement-response-dto';
import { StockSummaryResponseDto } from '../models/stock-summary-response-dto';

@Injectable({ providedIn: 'root' })
export class StockService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `stockControllerCreate()` */
  static readonly StockControllerCreatePath = '/stock';

  /**
   * Registrar movimiento de stock.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `stockControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  stockControllerCreate$Response(params: StockControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<StockMovementResponseDto>> {
    return stockControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Registrar movimiento de stock.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `stockControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  stockControllerCreate(params: StockControllerCreate$Params, context?: HttpContext): Observable<StockMovementResponseDto> {
    return this.stockControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<StockMovementResponseDto>): StockMovementResponseDto => r.body)
    );
  }

  /** Path part for operation `stockControllerGetMovements()` */
  static readonly StockControllerGetMovementsPath = '/stock/{productId}';

  /**
   * Listar movimientos de un producto.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `stockControllerGetMovements()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerGetMovements$Response(params: StockControllerGetMovements$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StockMovementResponseDto>>> {
    return stockControllerGetMovements(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar movimientos de un producto.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `stockControllerGetMovements$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerGetMovements(params: StockControllerGetMovements$Params, context?: HttpContext): Observable<Array<StockMovementResponseDto>> {
    return this.stockControllerGetMovements$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StockMovementResponseDto>>): Array<StockMovementResponseDto> => r.body)
    );
  }

  /** Path part for operation `stockControllerGetSummary()` */
  static readonly StockControllerGetSummaryPath = '/stock/{productId}/summary';

  /**
   * Resumen de stock actual del producto.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `stockControllerGetSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerGetSummary$Response(params: StockControllerGetSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<StockSummaryResponseDto>> {
    return stockControllerGetSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Resumen de stock actual del producto.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `stockControllerGetSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerGetSummary(params: StockControllerGetSummary$Params, context?: HttpContext): Observable<StockSummaryResponseDto> {
    return this.stockControllerGetSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<StockSummaryResponseDto>): StockSummaryResponseDto => r.body)
    );
  }

}
