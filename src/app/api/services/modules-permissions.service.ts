/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ModulePermissionResponseDto } from '../models/module-permission-response-dto';
import { ModuleResponseDto } from '../models/module-response-dto';
import { modulesControllerAssignPermissionToRole } from '../fn/modules-permissions/modules-controller-assign-permission-to-role';
import { ModulesControllerAssignPermissionToRole$Params } from '../fn/modules-permissions/modules-controller-assign-permission-to-role';
import { modulesControllerBulkAssignPermissionsToRole } from '../fn/modules-permissions/modules-controller-bulk-assign-permissions-to-role';
import { ModulesControllerBulkAssignPermissionsToRole$Params } from '../fn/modules-permissions/modules-controller-bulk-assign-permissions-to-role';
import { modulesControllerCreateModulePermission } from '../fn/modules-permissions/modules-controller-create-module-permission';
import { ModulesControllerCreateModulePermission$Params } from '../fn/modules-permissions/modules-controller-create-module-permission';
import { modulesControllerDeleteModulePermission } from '../fn/modules-permissions/modules-controller-delete-module-permission';
import { ModulesControllerDeleteModulePermission$Params } from '../fn/modules-permissions/modules-controller-delete-module-permission';
import { modulesControllerFindActiveModules } from '../fn/modules-permissions/modules-controller-find-active-modules';
import { ModulesControllerFindActiveModules$Params } from '../fn/modules-permissions/modules-controller-find-active-modules';
import { modulesControllerFindAllModulePermissions } from '../fn/modules-permissions/modules-controller-find-all-module-permissions';
import { ModulesControllerFindAllModulePermissions$Params } from '../fn/modules-permissions/modules-controller-find-all-module-permissions';
import { modulesControllerFindAllModules } from '../fn/modules-permissions/modules-controller-find-all-modules';
import { ModulesControllerFindAllModules$Params } from '../fn/modules-permissions/modules-controller-find-all-modules';
import { modulesControllerFindModulePermissions } from '../fn/modules-permissions/modules-controller-find-module-permissions';
import { ModulesControllerFindModulePermissions$Params } from '../fn/modules-permissions/modules-controller-find-module-permissions';
import { modulesControllerGetRolePermissions } from '../fn/modules-permissions/modules-controller-get-role-permissions';
import { ModulesControllerGetRolePermissions$Params } from '../fn/modules-permissions/modules-controller-get-role-permissions';
import { modulesControllerInitializeModulesAndPermissions } from '../fn/modules-permissions/modules-controller-initialize-modules-and-permissions';
import { ModulesControllerInitializeModulesAndPermissions$Params } from '../fn/modules-permissions/modules-controller-initialize-modules-and-permissions';
import { modulesControllerRemovePermissionFromRole } from '../fn/modules-permissions/modules-controller-remove-permission-from-role';
import { ModulesControllerRemovePermissionFromRole$Params } from '../fn/modules-permissions/modules-controller-remove-permission-from-role';
import { modulesControllerUpdateModulePermission } from '../fn/modules-permissions/modules-controller-update-module-permission';
import { ModulesControllerUpdateModulePermission$Params } from '../fn/modules-permissions/modules-controller-update-module-permission';

@Injectable({ providedIn: 'root' })
export class ModulesPermissionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `modulesControllerFindAllModules()` */
  static readonly ModulesControllerFindAllModulesPath = '/modules';

  /**
   * Obtener todos los módulos del sistema.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerFindAllModules()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerFindAllModules$Response(params?: ModulesControllerFindAllModules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModuleResponseDto>>> {
    return modulesControllerFindAllModules(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los módulos del sistema.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerFindAllModules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerFindAllModules(params?: ModulesControllerFindAllModules$Params, context?: HttpContext): Observable<Array<ModuleResponseDto>> {
    return this.modulesControllerFindAllModules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModuleResponseDto>>): Array<ModuleResponseDto> => r.body)
    );
  }

  /** Path part for operation `modulesControllerFindActiveModules()` */
  static readonly ModulesControllerFindActiveModulesPath = '/modules/active';

  /**
   * Obtener módulos activos.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerFindActiveModules()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerFindActiveModules$Response(params?: ModulesControllerFindActiveModules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModuleResponseDto>>> {
    return modulesControllerFindActiveModules(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener módulos activos.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerFindActiveModules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerFindActiveModules(params?: ModulesControllerFindActiveModules$Params, context?: HttpContext): Observable<Array<ModuleResponseDto>> {
    return this.modulesControllerFindActiveModules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModuleResponseDto>>): Array<ModuleResponseDto> => r.body)
    );
  }

  /** Path part for operation `modulesControllerInitializeModulesAndPermissions()` */
  static readonly ModulesControllerInitializeModulesAndPermissionsPath = '/modules/initialize';

  /**
   * Inicializar módulos y permisos por defecto.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerInitializeModulesAndPermissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerInitializeModulesAndPermissions$Response(params?: ModulesControllerInitializeModulesAndPermissions$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return modulesControllerInitializeModulesAndPermissions(this.http, this.rootUrl, params, context);
  }

  /**
   * Inicializar módulos y permisos por defecto.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerInitializeModulesAndPermissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerInitializeModulesAndPermissions(params?: ModulesControllerInitializeModulesAndPermissions$Params, context?: HttpContext): Observable<void> {
    return this.modulesControllerInitializeModulesAndPermissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `modulesControllerFindAllModulePermissions()` */
  static readonly ModulesControllerFindAllModulePermissionsPath = '/modules/permissions';

  /**
   * Obtener todos los permisos de módulos.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerFindAllModulePermissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerFindAllModulePermissions$Response(params?: ModulesControllerFindAllModulePermissions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModulePermissionResponseDto>>> {
    return modulesControllerFindAllModulePermissions(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los permisos de módulos.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerFindAllModulePermissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerFindAllModulePermissions(params?: ModulesControllerFindAllModulePermissions$Params, context?: HttpContext): Observable<Array<ModulePermissionResponseDto>> {
    return this.modulesControllerFindAllModulePermissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModulePermissionResponseDto>>): Array<ModulePermissionResponseDto> => r.body)
    );
  }

  /** Path part for operation `modulesControllerCreateModulePermission()` */
  static readonly ModulesControllerCreateModulePermissionPath = '/modules/permissions';

  /**
   * Crear un nuevo permiso de módulo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerCreateModulePermission()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modulesControllerCreateModulePermission$Response(params: ModulesControllerCreateModulePermission$Params, context?: HttpContext): Observable<StrictHttpResponse<ModulePermissionResponseDto>> {
    return modulesControllerCreateModulePermission(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un nuevo permiso de módulo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerCreateModulePermission$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modulesControllerCreateModulePermission(params: ModulesControllerCreateModulePermission$Params, context?: HttpContext): Observable<ModulePermissionResponseDto> {
    return this.modulesControllerCreateModulePermission$Response(params, context).pipe(
      map((r: StrictHttpResponse<ModulePermissionResponseDto>): ModulePermissionResponseDto => r.body)
    );
  }

  /** Path part for operation `modulesControllerFindModulePermissions()` */
  static readonly ModulesControllerFindModulePermissionsPath = '/modules/{moduleId}/permissions';

  /**
   * Obtener permisos de un módulo específico.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerFindModulePermissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerFindModulePermissions$Response(params: ModulesControllerFindModulePermissions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModulePermissionResponseDto>>> {
    return modulesControllerFindModulePermissions(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener permisos de un módulo específico.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerFindModulePermissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerFindModulePermissions(params: ModulesControllerFindModulePermissions$Params, context?: HttpContext): Observable<Array<ModulePermissionResponseDto>> {
    return this.modulesControllerFindModulePermissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModulePermissionResponseDto>>): Array<ModulePermissionResponseDto> => r.body)
    );
  }

  /** Path part for operation `modulesControllerUpdateModulePermission()` */
  static readonly ModulesControllerUpdateModulePermissionPath = '/modules/permissions/{id}';

  /**
   * Actualizar un permiso de módulo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerUpdateModulePermission()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modulesControllerUpdateModulePermission$Response(params: ModulesControllerUpdateModulePermission$Params, context?: HttpContext): Observable<StrictHttpResponse<ModulePermissionResponseDto>> {
    return modulesControllerUpdateModulePermission(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un permiso de módulo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerUpdateModulePermission$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modulesControllerUpdateModulePermission(params: ModulesControllerUpdateModulePermission$Params, context?: HttpContext): Observable<ModulePermissionResponseDto> {
    return this.modulesControllerUpdateModulePermission$Response(params, context).pipe(
      map((r: StrictHttpResponse<ModulePermissionResponseDto>): ModulePermissionResponseDto => r.body)
    );
  }

  /** Path part for operation `modulesControllerDeleteModulePermission()` */
  static readonly ModulesControllerDeleteModulePermissionPath = '/modules/permissions/{id}';

  /**
   * Eliminar un permiso de módulo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerDeleteModulePermission()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerDeleteModulePermission$Response(params: ModulesControllerDeleteModulePermission$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return modulesControllerDeleteModulePermission(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar un permiso de módulo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerDeleteModulePermission$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerDeleteModulePermission(params: ModulesControllerDeleteModulePermission$Params, context?: HttpContext): Observable<void> {
    return this.modulesControllerDeleteModulePermission$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `modulesControllerAssignPermissionToRole()` */
  static readonly ModulesControllerAssignPermissionToRolePath = '/modules/permissions/assign';

  /**
   * Asignar un permiso a un rol.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerAssignPermissionToRole()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modulesControllerAssignPermissionToRole$Response(params: ModulesControllerAssignPermissionToRole$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return modulesControllerAssignPermissionToRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Asignar un permiso a un rol.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerAssignPermissionToRole$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modulesControllerAssignPermissionToRole(params: ModulesControllerAssignPermissionToRole$Params, context?: HttpContext): Observable<void> {
    return this.modulesControllerAssignPermissionToRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `modulesControllerBulkAssignPermissionsToRole()` */
  static readonly ModulesControllerBulkAssignPermissionsToRolePath = '/modules/permissions/assign-bulk';

  /**
   * Asignar múltiples permisos a un rol.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerBulkAssignPermissionsToRole()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modulesControllerBulkAssignPermissionsToRole$Response(params: ModulesControllerBulkAssignPermissionsToRole$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return modulesControllerBulkAssignPermissionsToRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Asignar múltiples permisos a un rol.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerBulkAssignPermissionsToRole$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modulesControllerBulkAssignPermissionsToRole(params: ModulesControllerBulkAssignPermissionsToRole$Params, context?: HttpContext): Observable<void> {
    return this.modulesControllerBulkAssignPermissionsToRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `modulesControllerRemovePermissionFromRole()` */
  static readonly ModulesControllerRemovePermissionFromRolePath = '/modules/permissions/{permissionId}/roles/{roleId}';

  /**
   * Remover un permiso de un rol.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerRemovePermissionFromRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerRemovePermissionFromRole$Response(params: ModulesControllerRemovePermissionFromRole$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return modulesControllerRemovePermissionFromRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Remover un permiso de un rol.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerRemovePermissionFromRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerRemovePermissionFromRole(params: ModulesControllerRemovePermissionFromRole$Params, context?: HttpContext): Observable<void> {
    return this.modulesControllerRemovePermissionFromRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `modulesControllerGetRolePermissions()` */
  static readonly ModulesControllerGetRolePermissionsPath = '/modules/roles/{roleId}/permissions';

  /**
   * Obtener permisos de un rol específico.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modulesControllerGetRolePermissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerGetRolePermissions$Response(params: ModulesControllerGetRolePermissions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModulePermissionResponseDto>>> {
    return modulesControllerGetRolePermissions(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener permisos de un rol específico.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modulesControllerGetRolePermissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  modulesControllerGetRolePermissions(params: ModulesControllerGetRolePermissions$Params, context?: HttpContext): Observable<Array<ModulePermissionResponseDto>> {
    return this.modulesControllerGetRolePermissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModulePermissionResponseDto>>): Array<ModulePermissionResponseDto> => r.body)
    );
  }

}
