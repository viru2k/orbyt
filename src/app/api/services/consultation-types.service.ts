/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { consultationTypeControllerCreate } from '../fn/consultation-types/consultation-type-controller-create';
import { ConsultationTypeControllerCreate$Params } from '../fn/consultation-types/consultation-type-controller-create';
import { consultationTypeControllerDelete } from '../fn/consultation-types/consultation-type-controller-delete';
import { ConsultationTypeControllerDelete$Params } from '../fn/consultation-types/consultation-type-controller-delete';
import { consultationTypeControllerFindAll } from '../fn/consultation-types/consultation-type-controller-find-all';
import { ConsultationTypeControllerFindAll$Params } from '../fn/consultation-types/consultation-type-controller-find-all';
import { consultationTypeControllerFindOne } from '../fn/consultation-types/consultation-type-controller-find-one';
import { ConsultationTypeControllerFindOne$Params } from '../fn/consultation-types/consultation-type-controller-find-one';
import { consultationTypeControllerUpdate } from '../fn/consultation-types/consultation-type-controller-update';
import { ConsultationTypeControllerUpdate$Params } from '../fn/consultation-types/consultation-type-controller-update';
import { ConsultationTypeResponseDto } from '../models/consultation-type-response-dto';

@Injectable({ providedIn: 'root' })
export class ConsultationTypesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `consultationTypeControllerFindAll()` */
  static readonly ConsultationTypeControllerFindAllPath = '/consultation-types';

  /**
   * Listar todos los tipos de consulta del perfil actual.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationTypeControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationTypeControllerFindAll$Response(params?: ConsultationTypeControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConsultationTypeResponseDto>>> {
    return consultationTypeControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todos los tipos de consulta del perfil actual.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationTypeControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationTypeControllerFindAll(params?: ConsultationTypeControllerFindAll$Params, context?: HttpContext): Observable<Array<ConsultationTypeResponseDto>> {
    return this.consultationTypeControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ConsultationTypeResponseDto>>): Array<ConsultationTypeResponseDto> => r.body)
    );
  }

  /** Path part for operation `consultationTypeControllerCreate()` */
  static readonly ConsultationTypeControllerCreatePath = '/consultation-types';

  /**
   * Crear nuevo tipo de consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationTypeControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationTypeControllerCreate$Response(params: ConsultationTypeControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationTypeResponseDto>> {
    return consultationTypeControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear nuevo tipo de consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationTypeControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationTypeControllerCreate(params: ConsultationTypeControllerCreate$Params, context?: HttpContext): Observable<ConsultationTypeResponseDto> {
    return this.consultationTypeControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationTypeResponseDto>): ConsultationTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationTypeControllerFindOne()` */
  static readonly ConsultationTypeControllerFindOnePath = '/consultation-types/{id}';

  /**
   * Obtener un tipo de consulta por ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationTypeControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationTypeControllerFindOne$Response(params: ConsultationTypeControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationTypeResponseDto>> {
    return consultationTypeControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener un tipo de consulta por ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationTypeControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationTypeControllerFindOne(params: ConsultationTypeControllerFindOne$Params, context?: HttpContext): Observable<ConsultationTypeResponseDto> {
    return this.consultationTypeControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationTypeResponseDto>): ConsultationTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationTypeControllerUpdate()` */
  static readonly ConsultationTypeControllerUpdatePath = '/consultation-types/{id}';

  /**
   * Actualizar un tipo de consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationTypeControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationTypeControllerUpdate$Response(params: ConsultationTypeControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ConsultationTypeResponseDto>> {
    return consultationTypeControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un tipo de consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationTypeControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  consultationTypeControllerUpdate(params: ConsultationTypeControllerUpdate$Params, context?: HttpContext): Observable<ConsultationTypeResponseDto> {
    return this.consultationTypeControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConsultationTypeResponseDto>): ConsultationTypeResponseDto => r.body)
    );
  }

  /** Path part for operation `consultationTypeControllerDelete()` */
  static readonly ConsultationTypeControllerDeletePath = '/consultation-types/{id}';

  /**
   * Eliminar un tipo de consulta.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `consultationTypeControllerDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationTypeControllerDelete$Response(params: ConsultationTypeControllerDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return consultationTypeControllerDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar un tipo de consulta.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `consultationTypeControllerDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  consultationTypeControllerDelete(params: ConsultationTypeControllerDelete$Params, context?: HttpContext): Observable<void> {
    return this.consultationTypeControllerDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
